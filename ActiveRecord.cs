


#pragma warning disable 1591 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic.DataProviders;
using SubSonic.Extensions;
using System.Linq.Expressions;
using SubSonic.Schema;
using System.Collections;
using SubSonic;
using SubSonic.Repository;
using System.ComponentModel;
using System.Data.Common;

namespace DBDataAccess
{
    
    
    /// <summary>
    /// A class which represents the TimeZone table in the Meetball Database.
    /// </summary>
    public partial class TimeZone: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TimeZone> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TimeZone>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TimeZone> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TimeZone item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TimeZone item=new TimeZone();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TimeZone> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public TimeZone(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TimeZone.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TimeZone>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TimeZone(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TimeZone(Expression<Func<TimeZone, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TimeZone> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<TimeZone> _repo;
            
            if(db.TestMode){
                TimeZone.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TimeZone>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TimeZone> GetRepo(){
            return GetRepo("","");
        }
        
        public static TimeZone SingleOrDefault(Expression<Func<TimeZone, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TimeZone single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TimeZone SingleOrDefault(Expression<Func<TimeZone, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TimeZone single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TimeZone, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TimeZone, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TimeZone> Find(Expression<Func<TimeZone, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TimeZone> Find(Expression<Func<TimeZone, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TimeZone> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TimeZone> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TimeZone> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TimeZone> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TimeZone> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TimeZone> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "TimeZoneID";
        }

        public object KeyValue()
        {
            return this.TimeZoneID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.TimeZoneAbbreviation.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TimeZone)){
                TimeZone compare=(TimeZone)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.TimeZoneID;
        }
        
        public string DescriptorValue()
        {
                            return this.TimeZoneAbbreviation.ToString();
                    }

        public string DescriptorColumn() {
            return "TimeZoneAbbreviation";
        }
        public static string GetKeyColumn()
        {
            return "TimeZoneID";
        }        
        public static string GetDescriptorColumn()
        {
            return "TimeZoneAbbreviation";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.TimeZoneID == _TimeZoneID
                       select items;
            }
        }

        #endregion
        

        int _TimeZoneID;
        public int TimeZoneID
        {
            get { return _TimeZoneID; }
            set
            {
                if(_TimeZoneID!=value){
                    _TimeZoneID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimeZoneID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TimeZoneAbbreviation;
        public string TimeZoneAbbreviation
        {
            get { return _TimeZoneAbbreviation; }
            set
            {
                if(_TimeZoneAbbreviation!=value){
                    _TimeZoneAbbreviation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimeZoneAbbreviation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TimeZoneName;
        public string TimeZoneName
        {
            get { return _TimeZoneName; }
            set
            {
                if(_TimeZoneName!=value){
                    _TimeZoneName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimeZoneName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VarianceFromGMT;
        public int? VarianceFromGMT
        {
            get { return _VarianceFromGMT; }
            set
            {
                if(_VarianceFromGMT!=value){
                    _VarianceFromGMT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VarianceFromGMT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TimeZone, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SportsType table in the Meetball Database.
    /// </summary>
    public partial class SportsType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SportsType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SportsType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SportsType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SportsType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SportsType item=new SportsType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SportsType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public SportsType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SportsType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SportsType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SportsType(Expression<Func<SportsType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SportsType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<SportsType> _repo;
            
            if(db.TestMode){
                SportsType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SportsType> GetRepo(){
            return GetRepo("","");
        }
        
        public static SportsType SingleOrDefault(Expression<Func<SportsType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SportsType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SportsType SingleOrDefault(Expression<Func<SportsType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SportsType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SportsType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SportsType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SportsType> Find(Expression<Func<SportsType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SportsType> Find(Expression<Func<SportsType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SportsType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SportsType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SportsType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SportsType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SportsType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SportsType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SportsTypeID";
        }

        public object KeyValue()
        {
            return this.SportsTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SportsTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SportsType)){
                SportsType compare=(SportsType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SportsTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.SportsTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "SportsTypeName";
        }
        public static string GetKeyColumn()
        {
            return "SportsTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SportsTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Division> Divisions
        {
            get
            {
                
                  var repo=DBDataAccess.Division.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        public IQueryable<SportsTeam> SportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        public IQueryable<Conference> Conferences
        {
            get
            {
                
                  var repo=DBDataAccess.Conference.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        public IQueryable<SportsEvent> SportsEvents
        {
            get
            {
                
                  var repo=DBDataAccess.SportsEvent.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        #endregion
        

        int _SportsTypeID;
        public int SportsTypeID
        {
            get { return _SportsTypeID; }
            set
            {
                if(_SportsTypeID!=value){
                    _SportsTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SportsTypeName;
        public string SportsTypeName
        {
            get { return _SportsTypeName; }
            set
            {
                if(_SportsTypeName!=value){
                    _SportsTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SportsType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the NotificationAction table in the Meetball Database.
    /// </summary>
    public partial class NotificationAction: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<NotificationAction> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<NotificationAction>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<NotificationAction> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(NotificationAction item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                NotificationAction item=new NotificationAction();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<NotificationAction> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public NotificationAction(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                NotificationAction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<NotificationAction>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public NotificationAction(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public NotificationAction(Expression<Func<NotificationAction, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<NotificationAction> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<NotificationAction> _repo;
            
            if(db.TestMode){
                NotificationAction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<NotificationAction>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<NotificationAction> GetRepo(){
            return GetRepo("","");
        }
        
        public static NotificationAction SingleOrDefault(Expression<Func<NotificationAction, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            NotificationAction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static NotificationAction SingleOrDefault(Expression<Func<NotificationAction, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            NotificationAction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<NotificationAction, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<NotificationAction, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<NotificationAction> Find(Expression<Func<NotificationAction, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<NotificationAction> Find(Expression<Func<NotificationAction, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<NotificationAction> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<NotificationAction> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<NotificationAction> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<NotificationAction> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<NotificationAction> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<NotificationAction> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "NotificationActionID";
        }

        public object KeyValue()
        {
            return this.NotificationActionID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.NotificationActionName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(NotificationAction)){
                NotificationAction compare=(NotificationAction)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.NotificationActionID;
        }
        
        public string DescriptorValue()
        {
                            return this.NotificationActionName.ToString();
                    }

        public string DescriptorColumn() {
            return "NotificationActionName";
        }
        public static string GetKeyColumn()
        {
            return "NotificationActionID";
        }        
        public static string GetDescriptorColumn()
        {
            return "NotificationActionName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Notification> Notifications
        {
            get
            {
                
                  var repo=DBDataAccess.Notification.GetRepo();
                  return from items in repo.GetAll()
                       where items.NotificationActionID == _NotificationActionID
                       select items;
            }
        }

        #endregion
        

        int _NotificationActionID;
        public int NotificationActionID
        {
            get { return _NotificationActionID; }
            set
            {
                if(_NotificationActionID!=value){
                    _NotificationActionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationActionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NotificationActionName;
        public string NotificationActionName
        {
            get { return _NotificationActionName; }
            set
            {
                if(_NotificationActionName!=value){
                    _NotificationActionName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationActionName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<NotificationAction, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ConvoXAppUser table in the Meetball Database.
    /// </summary>
    public partial class ConvoXAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ConvoXAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ConvoXAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ConvoXAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ConvoXAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ConvoXAppUser item=new ConvoXAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ConvoXAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public ConvoXAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ConvoXAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ConvoXAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ConvoXAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ConvoXAppUser(Expression<Func<ConvoXAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ConvoXAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<ConvoXAppUser> _repo;
            
            if(db.TestMode){
                ConvoXAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ConvoXAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ConvoXAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static ConvoXAppUser SingleOrDefault(Expression<Func<ConvoXAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ConvoXAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ConvoXAppUser SingleOrDefault(Expression<Func<ConvoXAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ConvoXAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ConvoXAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ConvoXAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ConvoXAppUser> Find(Expression<Func<ConvoXAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ConvoXAppUser> Find(Expression<Func<ConvoXAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ConvoXAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ConvoXAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ConvoXAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ConvoXAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ConvoXAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ConvoXAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ConvoXAppUser)){
                ConvoXAppUser compare=(ConvoXAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Convo> Convos
        {
            get
            {
                
                  var repo=DBDataAccess.Convo.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        #endregion
        

        int _ConvoID;
        public int ConvoID
        {
            get { return _ConvoID; }
            set
            {
                if(_ConvoID!=value){
                    _ConvoID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ToRead;
        public int? ToRead
        {
            get { return _ToRead; }
            set
            {
                if(_ToRead!=value){
                    _ToRead=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToRead");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastMessageDate;
        public DateTime? LastMessageDate
        {
            get { return _LastMessageDate; }
            set
            {
                if(_LastMessageDate!=value){
                    _LastMessageDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastMessageDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ConvoXAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SportsEventType table in the Meetball Database.
    /// </summary>
    public partial class SportsEventType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SportsEventType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SportsEventType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SportsEventType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SportsEventType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SportsEventType item=new SportsEventType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SportsEventType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public SportsEventType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SportsEventType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsEventType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SportsEventType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SportsEventType(Expression<Func<SportsEventType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SportsEventType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<SportsEventType> _repo;
            
            if(db.TestMode){
                SportsEventType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsEventType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SportsEventType> GetRepo(){
            return GetRepo("","");
        }
        
        public static SportsEventType SingleOrDefault(Expression<Func<SportsEventType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SportsEventType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SportsEventType SingleOrDefault(Expression<Func<SportsEventType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SportsEventType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SportsEventType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SportsEventType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SportsEventType> Find(Expression<Func<SportsEventType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SportsEventType> Find(Expression<Func<SportsEventType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SportsEventType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SportsEventType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SportsEventType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SportsEventType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SportsEventType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SportsEventType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SportsEventTypeID";
        }

        public object KeyValue()
        {
            return this.SportsEventTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SportsEventTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SportsEventType)){
                SportsEventType compare=(SportsEventType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SportsEventTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.SportsEventTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "SportsEventTypeName";
        }
        public static string GetKeyColumn()
        {
            return "SportsEventTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SportsEventTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SportsEvent> SportsEvents
        {
            get
            {
                
                  var repo=DBDataAccess.SportsEvent.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsEventTypeID == _SportsEventTypeID
                       select items;
            }
        }

        #endregion
        

        int _SportsEventTypeID;
        public int SportsEventTypeID
        {
            get { return _SportsEventTypeID; }
            set
            {
                if(_SportsEventTypeID!=value){
                    _SportsEventTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsEventTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SportsEventTypeName;
        public string SportsEventTypeName
        {
            get { return _SportsEventTypeName; }
            set
            {
                if(_SportsEventTypeName!=value){
                    _SportsEventTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsEventTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SportsEventType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Notification table in the Meetball Database.
    /// </summary>
    public partial class Notification: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Notification> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Notification>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Notification> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Notification item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Notification item=new Notification();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Notification> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Notification(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Notification.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Notification>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Notification(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Notification(Expression<Func<Notification, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Notification> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Notification> _repo;
            
            if(db.TestMode){
                Notification.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Notification>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Notification> GetRepo(){
            return GetRepo("","");
        }
        
        public static Notification SingleOrDefault(Expression<Func<Notification, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Notification single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Notification SingleOrDefault(Expression<Func<Notification, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Notification single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Notification, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Notification, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Notification> Find(Expression<Func<Notification, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Notification> Find(Expression<Func<Notification, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Notification> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Notification> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Notification> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Notification> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Notification> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Notification> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "NotificationID";
        }

        public object KeyValue()
        {
            return this.NotificationID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.NotificationTitle.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Notification)){
                Notification compare=(Notification)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.NotificationID;
        }
        
        public string DescriptorValue()
        {
                            return this.NotificationTitle.ToString();
                    }

        public string DescriptorColumn() {
            return "NotificationTitle";
        }
        public static string GetKeyColumn()
        {
            return "NotificationID";
        }        
        public static string GetDescriptorColumn()
        {
            return "NotificationTitle";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _NotificationAppUserID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _NotificationMeetballID
                       select items;
            }
        }

        public IQueryable<NotificationAction> NotificationActions
        {
            get
            {
                
                  var repo=DBDataAccess.NotificationAction.GetRepo();
                  return from items in repo.GetAll()
                       where items.NotificationActionID == _NotificationActionID
                       select items;
            }
        }

        #endregion
        

        int _NotificationID;
        public int NotificationID
        {
            get { return _NotificationID; }
            set
            {
                if(_NotificationID!=value){
                    _NotificationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRead;
        public bool IsRead
        {
            get { return _IsRead; }
            set
            {
                if(_IsRead!=value){
                    _IsRead=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRead");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NotificationActionID;
        public int NotificationActionID
        {
            get { return _NotificationActionID; }
            set
            {
                if(_NotificationActionID!=value){
                    _NotificationActionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationActionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _NotificationDate;
        public DateTime NotificationDate
        {
            get { return _NotificationDate; }
            set
            {
                if(_NotificationDate!=value){
                    _NotificationDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NotificationTitle;
        public string NotificationTitle
        {
            get { return _NotificationTitle; }
            set
            {
                if(_NotificationTitle!=value){
                    _NotificationTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NotificationBody;
        public string NotificationBody
        {
            get { return _NotificationBody; }
            set
            {
                if(_NotificationBody!=value){
                    _NotificationBody=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationBody");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _NotificationAppUserID;
        public int? NotificationAppUserID
        {
            get { return _NotificationAppUserID; }
            set
            {
                if(_NotificationAppUserID!=value){
                    _NotificationAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _NotificationMeetballID;
        public int? NotificationMeetballID
        {
            get { return _NotificationMeetballID; }
            set
            {
                if(_NotificationMeetballID!=value){
                    _NotificationMeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotificationMeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Notification, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserActivity table in the Meetball Database.
    /// </summary>
    public partial class AppUserActivity: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserActivity> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserActivity>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserActivity> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserActivity item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserActivity item=new AppUserActivity();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserActivity> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserActivity(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserActivity.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserActivity>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserActivity(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserActivity(Expression<Func<AppUserActivity, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserActivity> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserActivity> _repo;
            
            if(db.TestMode){
                AppUserActivity.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserActivity>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserActivity> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserActivity SingleOrDefault(Expression<Func<AppUserActivity, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserActivity single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserActivity SingleOrDefault(Expression<Func<AppUserActivity, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserActivity single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserActivity, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserActivity, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserActivity> Find(Expression<Func<AppUserActivity, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserActivity> Find(Expression<Func<AppUserActivity, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserActivity> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserActivity> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserActivity> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserActivity> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserActivity> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserActivity> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserActivityID";
        }

        public object KeyValue()
        {
            return this.AppUserActivityID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserActivityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserActivity)){
                AppUserActivity compare=(AppUserActivity)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserActivityID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserActivityName.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserActivityName";
        }
        public static string GetKeyColumn()
        {
            return "AppUserActivityID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserActivityName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUserActivityLog> AppUserActivityLogs
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserActivityID == _AppUserActivityID
                       select items;
            }
        }

        #endregion
        

        int _AppUserActivityID;
        public int AppUserActivityID
        {
            get { return _AppUserActivityID; }
            set
            {
                if(_AppUserActivityID!=value){
                    _AppUserActivityID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserActivityID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppUserActivityName;
        public string AppUserActivityName
        {
            get { return _AppUserActivityName; }
            set
            {
                if(_AppUserActivityName!=value){
                    _AppUserActivityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserActivityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppUserActivityDescription;
        public string AppUserActivityDescription
        {
            get { return _AppUserActivityDescription; }
            set
            {
                if(_AppUserActivityDescription!=value){
                    _AppUserActivityDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserActivityDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserActivity, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the PhoneAppUser table in the Meetball Database.
    /// </summary>
    public partial class PhoneAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<PhoneAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<PhoneAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<PhoneAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(PhoneAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                PhoneAppUser item=new PhoneAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<PhoneAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public PhoneAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                PhoneAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PhoneAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public PhoneAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public PhoneAppUser(Expression<Func<PhoneAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<PhoneAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<PhoneAppUser> _repo;
            
            if(db.TestMode){
                PhoneAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PhoneAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PhoneAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static PhoneAppUser SingleOrDefault(Expression<Func<PhoneAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            PhoneAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static PhoneAppUser SingleOrDefault(Expression<Func<PhoneAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            PhoneAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<PhoneAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<PhoneAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<PhoneAppUser> Find(Expression<Func<PhoneAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PhoneAppUser> Find(Expression<Func<PhoneAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<PhoneAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<PhoneAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PhoneAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PhoneAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PhoneAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<PhoneAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PhoneAppUserId";
        }

        public object KeyValue()
        {
            return this.PhoneAppUserId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Phone.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(PhoneAppUser)){
                PhoneAppUser compare=(PhoneAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PhoneAppUserId;
        }
        
        public string DescriptorValue()
        {
                            return this.Phone.ToString();
                    }

        public string DescriptorColumn() {
            return "Phone";
        }
        public static string GetKeyColumn()
        {
            return "PhoneAppUserId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Phone";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserId
                       select items;
            }
        }

        #endregion
        

        int _PhoneAppUserId;
        public int PhoneAppUserId
        {
            get { return _PhoneAppUserId; }
            set
            {
                if(_PhoneAppUserId!=value){
                    _PhoneAppUserId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PhoneAppUserId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserId;
        public int AppUserId
        {
            get { return _AppUserId; }
            set
            {
                if(_AppUserId!=value){
                    _AppUserId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StatusId;
        public int StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<PhoneAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the GPXType table in the Meetball Database.
    /// </summary>
    public partial class GPXType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<GPXType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<GPXType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<GPXType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(GPXType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                GPXType item=new GPXType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<GPXType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public GPXType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                GPXType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GPXType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public GPXType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public GPXType(Expression<Func<GPXType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<GPXType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<GPXType> _repo;
            
            if(db.TestMode){
                GPXType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GPXType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GPXType> GetRepo(){
            return GetRepo("","");
        }
        
        public static GPXType SingleOrDefault(Expression<Func<GPXType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            GPXType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static GPXType SingleOrDefault(Expression<Func<GPXType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            GPXType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<GPXType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<GPXType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<GPXType> Find(Expression<Func<GPXType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GPXType> Find(Expression<Func<GPXType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<GPXType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<GPXType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GPXType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GPXType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GPXType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<GPXType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "GPXTypeID";
        }

        public object KeyValue()
        {
            return this.GPXTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.GPXTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(GPXType)){
                GPXType compare=(GPXType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.GPXTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.GPXTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "GPXTypeName";
        }
        public static string GetKeyColumn()
        {
            return "GPXTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "GPXTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.GeneralLocationGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs1
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.SpecificLocationGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        public IQueryable<MeetballLog> MeetballLogs
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.SpecificLocationGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        public IQueryable<MeetballLog> MeetballLogs3
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.GeneralLocationGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        public IQueryable<MeetballTracking> MeetballTrackings
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballTracking.GetRepo();
                  return from items in repo.GetAll()
                       where items.TrackingGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        public IQueryable<Venue> Venues
        {
            get
            {
                
                  var repo=DBDataAccess.Venue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        public IQueryable<VenueLot> VenueLots
        {
            get
            {
                
                  var repo=DBDataAccess.VenueLot.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueLotGPXTypeID == _GPXTypeID
                       select items;
            }
        }

        #endregion
        

        int _GPXTypeID;
        public int GPXTypeID
        {
            get { return _GPXTypeID; }
            set
            {
                if(_GPXTypeID!=value){
                    _GPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GPXTypeName;
        public string GPXTypeName
        {
            get { return _GPXTypeName; }
            set
            {
                if(_GPXTypeName!=value){
                    _GPXTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GPXTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<GPXType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Usage table in the Meetball Database.
    /// </summary>
    public partial class Usage: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Usage> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Usage>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Usage> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Usage item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Usage item=new Usage();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Usage> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Usage(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Usage.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Usage>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Usage(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Usage(Expression<Func<Usage, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Usage> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Usage> _repo;
            
            if(db.TestMode){
                Usage.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Usage>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Usage> GetRepo(){
            return GetRepo("","");
        }
        
        public static Usage SingleOrDefault(Expression<Func<Usage, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Usage single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Usage SingleOrDefault(Expression<Func<Usage, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Usage single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Usage, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Usage, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Usage> Find(Expression<Func<Usage, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Usage> Find(Expression<Func<Usage, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Usage> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Usage> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Usage> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Usage> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Usage> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Usage> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "UsageId";
        }

        public object KeyValue()
        {
            return this.UsageId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.UsageName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Usage)){
                Usage compare=(Usage)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.UsageId;
        }
        
        public string DescriptorValue()
        {
                            return this.UsageName.ToString();
                    }

        public string DescriptorColumn() {
            return "UsageName";
        }
        public static string GetKeyColumn()
        {
            return "UsageId";
        }        
        public static string GetDescriptorColumn()
        {
            return "UsageName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.UsageId == _UsageId
                       select items;
            }
        }

        #endregion
        

        int _UsageId;
        public int UsageId
        {
            get { return _UsageId; }
            set
            {
                if(_UsageId!=value){
                    _UsageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UsageName;
        public string UsageName
        {
            get { return _UsageName; }
            set
            {
                if(_UsageName!=value){
                    _UsageName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsageName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Usage, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the FriendStatus table in the Meetball Database.
    /// </summary>
    public partial class FriendStatus: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<FriendStatus> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<FriendStatus>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<FriendStatus> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(FriendStatus item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                FriendStatus item=new FriendStatus();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<FriendStatus> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public FriendStatus(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                FriendStatus.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FriendStatus>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public FriendStatus(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public FriendStatus(Expression<Func<FriendStatus, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<FriendStatus> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<FriendStatus> _repo;
            
            if(db.TestMode){
                FriendStatus.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FriendStatus>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<FriendStatus> GetRepo(){
            return GetRepo("","");
        }
        
        public static FriendStatus SingleOrDefault(Expression<Func<FriendStatus, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            FriendStatus single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static FriendStatus SingleOrDefault(Expression<Func<FriendStatus, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            FriendStatus single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<FriendStatus, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<FriendStatus, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<FriendStatus> Find(Expression<Func<FriendStatus, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<FriendStatus> Find(Expression<Func<FriendStatus, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<FriendStatus> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<FriendStatus> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<FriendStatus> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<FriendStatus> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<FriendStatus> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<FriendStatus> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FriendStatusID";
        }

        public object KeyValue()
        {
            return this.FriendStatusID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FriendStatusName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(FriendStatus)){
                FriendStatus compare=(FriendStatus)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FriendStatusID;
        }
        
        public string DescriptorValue()
        {
                            return this.FriendStatusName.ToString();
                    }

        public string DescriptorColumn() {
            return "FriendStatusName";
        }
        public static string GetKeyColumn()
        {
            return "FriendStatusID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FriendStatusName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUserXFriendAppUser> AppUserXFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.FriendStatusID == _FriendStatusID
                       select items;
            }
        }

        #endregion
        

        int _FriendStatusID;
        public int FriendStatusID
        {
            get { return _FriendStatusID; }
            set
            {
                if(_FriendStatusID!=value){
                    _FriendStatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendStatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FriendStatusName;
        public string FriendStatusName
        {
            get { return _FriendStatusName; }
            set
            {
                if(_FriendStatusName!=value){
                    _FriendStatusName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendStatusName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<FriendStatus, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the EventType table in the Meetball Database.
    /// </summary>
    public partial class EventType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<EventType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<EventType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<EventType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(EventType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                EventType item=new EventType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<EventType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public EventType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                EventType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EventType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public EventType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public EventType(Expression<Func<EventType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<EventType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<EventType> _repo;
            
            if(db.TestMode){
                EventType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EventType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<EventType> GetRepo(){
            return GetRepo("","");
        }
        
        public static EventType SingleOrDefault(Expression<Func<EventType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            EventType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static EventType SingleOrDefault(Expression<Func<EventType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            EventType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<EventType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<EventType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<EventType> Find(Expression<Func<EventType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<EventType> Find(Expression<Func<EventType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<EventType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<EventType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EventType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EventType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EventType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<EventType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EventTypeID";
        }

        public object KeyValue()
        {
            return this.EventTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EventTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(EventType)){
                EventType compare=(EventType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EventTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.EventTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "EventTypeName";
        }
        public static string GetKeyColumn()
        {
            return "EventTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "EventTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Event> Events
        {
            get
            {
                
                  var repo=DBDataAccess.Event.GetRepo();
                  return from items in repo.GetAll()
                       where items.EventTypeID == _EventTypeID
                       select items;
            }
        }

        #endregion
        

        int _EventTypeID;
        public int EventTypeID
        {
            get { return _EventTypeID; }
            set
            {
                if(_EventTypeID!=value){
                    _EventTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EventTypeName;
        public string EventTypeName
        {
            get { return _EventTypeName; }
            set
            {
                if(_EventTypeName!=value){
                    _EventTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EventTypeAbbr;
        public string EventTypeAbbr
        {
            get { return _EventTypeAbbr; }
            set
            {
                if(_EventTypeAbbr!=value){
                    _EventTypeAbbr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventTypeAbbr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EventNameReplacement;
        public string EventNameReplacement
        {
            get { return _EventNameReplacement; }
            set
            {
                if(_EventNameReplacement!=value){
                    _EventNameReplacement=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventNameReplacement");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<EventType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the WebAssetCollection table in the Meetball Database.
    /// </summary>
    public partial class WebAssetCollection: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<WebAssetCollection> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<WebAssetCollection>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<WebAssetCollection> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(WebAssetCollection item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                WebAssetCollection item=new WebAssetCollection();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<WebAssetCollection> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public WebAssetCollection(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                WebAssetCollection.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAssetCollection>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public WebAssetCollection(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public WebAssetCollection(Expression<Func<WebAssetCollection, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<WebAssetCollection> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<WebAssetCollection> _repo;
            
            if(db.TestMode){
                WebAssetCollection.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAssetCollection>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<WebAssetCollection> GetRepo(){
            return GetRepo("","");
        }
        
        public static WebAssetCollection SingleOrDefault(Expression<Func<WebAssetCollection, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            WebAssetCollection single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static WebAssetCollection SingleOrDefault(Expression<Func<WebAssetCollection, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            WebAssetCollection single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<WebAssetCollection, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<WebAssetCollection, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<WebAssetCollection> Find(Expression<Func<WebAssetCollection, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<WebAssetCollection> Find(Expression<Func<WebAssetCollection, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<WebAssetCollection> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<WebAssetCollection> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<WebAssetCollection> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<WebAssetCollection> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<WebAssetCollection> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<WebAssetCollection> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "WebAssetCollectionId";
        }

        public object KeyValue()
        {
            return this.WebAssetCollectionId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WebAssetCollectionName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(WebAssetCollection)){
                WebAssetCollection compare=(WebAssetCollection)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.WebAssetCollectionId;
        }
        
        public string DescriptorValue()
        {
                            return this.WebAssetCollectionName.ToString();
                    }

        public string DescriptorColumn() {
            return "WebAssetCollectionName";
        }
        public static string GetKeyColumn()
        {
            return "WebAssetCollectionId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WebAssetCollectionName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<WebAsset> WebAssets
        {
            get
            {
                
                  var repo=DBDataAccess.WebAsset.GetRepo();
                  return from items in repo.GetAll()
                       where items.WebAssetCollectionId == _WebAssetCollectionId
                       select items;
            }
        }

        #endregion
        

        int _WebAssetCollectionId;
        public int WebAssetCollectionId
        {
            get { return _WebAssetCollectionId; }
            set
            {
                if(_WebAssetCollectionId!=value){
                    _WebAssetCollectionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetCollectionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WebAssetCollectionName;
        public string WebAssetCollectionName
        {
            get { return _WebAssetCollectionName; }
            set
            {
                if(_WebAssetCollectionName!=value){
                    _WebAssetCollectionName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetCollectionName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<WebAssetCollection, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ContactImport table in the Meetball Database.
    /// </summary>
    public partial class ContactImport: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ContactImport> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ContactImport>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ContactImport> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ContactImport item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ContactImport item=new ContactImport();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ContactImport> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public ContactImport(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ContactImport.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ContactImport>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ContactImport(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ContactImport(Expression<Func<ContactImport, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ContactImport> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<ContactImport> _repo;
            
            if(db.TestMode){
                ContactImport.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ContactImport>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ContactImport> GetRepo(){
            return GetRepo("","");
        }
        
        public static ContactImport SingleOrDefault(Expression<Func<ContactImport, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ContactImport single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ContactImport SingleOrDefault(Expression<Func<ContactImport, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ContactImport single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ContactImport, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ContactImport, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ContactImport> Find(Expression<Func<ContactImport, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ContactImport> Find(Expression<Func<ContactImport, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ContactImport> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ContactImport> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ContactImport> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ContactImport> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ContactImport> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ContactImport> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ContactImportID";
        }

        public object KeyValue()
        {
            return this.ContactImportID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DisplayName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ContactImport)){
                ContactImport compare=(ContactImport)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ContactImportID;
        }
        
        public string DescriptorValue()
        {
                            return this.DisplayName.ToString();
                    }

        public string DescriptorColumn() {
            return "DisplayName";
        }
        public static string GetKeyColumn()
        {
            return "ContactImportID";
        }        
        public static string GetDescriptorColumn()
        {
            return "DisplayName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _ImportAppUserID
                       select items;
            }
        }

        #endregion
        

        int _ContactImportID;
        public int ContactImportID
        {
            get { return _ContactImportID; }
            set
            {
                if(_ContactImportID!=value){
                    _ContactImportID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContactImportID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BatchID;
        public int? BatchID
        {
            get { return _BatchID; }
            set
            {
                if(_BatchID!=value){
                    _BatchID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BatchID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ImportAppUserID;
        public int? ImportAppUserID
        {
            get { return _ImportAppUserID; }
            set
            {
                if(_ImportAppUserID!=value){
                    _ImportAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImportAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayName;
        public string DisplayName
        {
            get { return _DisplayName; }
            set
            {
                if(_DisplayName!=value){
                    _DisplayName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TwitterHandle;
        public string TwitterHandle
        {
            get { return _TwitterHandle; }
            set
            {
                if(_TwitterHandle!=value){
                    _TwitterHandle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TwitterHandle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ContactImport, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Division table in the Meetball Database.
    /// </summary>
    public partial class Division: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Division> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Division>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Division> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Division item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Division item=new Division();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Division> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Division(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Division.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Division>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Division(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Division(Expression<Func<Division, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Division> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Division> _repo;
            
            if(db.TestMode){
                Division.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Division>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Division> GetRepo(){
            return GetRepo("","");
        }
        
        public static Division SingleOrDefault(Expression<Func<Division, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Division single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Division SingleOrDefault(Expression<Func<Division, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Division single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Division, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Division, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Division> Find(Expression<Func<Division, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Division> Find(Expression<Func<Division, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Division> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Division> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Division> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Division> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Division> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Division> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "DivisionID";
        }

        public object KeyValue()
        {
            return this.DivisionID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DivisionName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Division)){
                Division compare=(Division)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.DivisionID;
        }
        
        public string DescriptorValue()
        {
                            return this.DivisionName.ToString();
                    }

        public string DescriptorColumn() {
            return "DivisionName";
        }
        public static string GetKeyColumn()
        {
            return "DivisionID";
        }        
        public static string GetDescriptorColumn()
        {
            return "DivisionName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SportsTeam> SportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.DivisionID == _DivisionID
                       select items;
            }
        }

        public IQueryable<SportsType> SportsTypes
        {
            get
            {
                
                  var repo=DBDataAccess.SportsType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        #endregion
        

        int _DivisionID;
        public int DivisionID
        {
            get { return _DivisionID; }
            set
            {
                if(_DivisionID!=value){
                    _DivisionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DivisionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DivisionName;
        public string DivisionName
        {
            get { return _DivisionName; }
            set
            {
                if(_DivisionName!=value){
                    _DivisionName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DivisionName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SportsTypeID;
        public int? SportsTypeID
        {
            get { return _SportsTypeID; }
            set
            {
                if(_SportsTypeID!=value){
                    _SportsTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Division, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ncaaVenueImport table in the Meetball Database.
    /// </summary>
    public partial class ncaaVenueImport: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ncaaVenueImport> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ncaaVenueImport>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ncaaVenueImport> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ncaaVenueImport item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ncaaVenueImport item=new ncaaVenueImport();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ncaaVenueImport> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public ncaaVenueImport(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ncaaVenueImport.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ncaaVenueImport>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ncaaVenueImport(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ncaaVenueImport(Expression<Func<ncaaVenueImport, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ncaaVenueImport> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<ncaaVenueImport> _repo;
            
            if(db.TestMode){
                ncaaVenueImport.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ncaaVenueImport>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ncaaVenueImport> GetRepo(){
            return GetRepo("","");
        }
        
        public static ncaaVenueImport SingleOrDefault(Expression<Func<ncaaVenueImport, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ncaaVenueImport single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ncaaVenueImport SingleOrDefault(Expression<Func<ncaaVenueImport, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ncaaVenueImport single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ncaaVenueImport, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ncaaVenueImport, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ncaaVenueImport> Find(Expression<Func<ncaaVenueImport, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ncaaVenueImport> Find(Expression<Func<ncaaVenueImport, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ncaaVenueImport> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ncaaVenueImport> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ncaaVenueImport> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ncaaVenueImport> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ncaaVenueImport> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ncaaVenueImport> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Team";
        }

        public object KeyValue()
        {
            return this.Team;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Team.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ncaaVenueImport)){
                ncaaVenueImport compare=(ncaaVenueImport)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.Team.ToString();
                    }

        public string DescriptorColumn() {
            return "Team";
        }
        public static string GetKeyColumn()
        {
            return "Team";
        }        
        public static string GetDescriptorColumn()
        {
            return "Team";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _Team;
        public string Team
        {
            get { return _Team; }
            set
            {
                if(_Team!=value){
                    _Team=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Team");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Venue;
        public string Venue
        {
            get { return _Venue; }
            set
            {
                if(_Venue!=value){
                    _Venue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Venue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StreetAddress;
        public string StreetAddress
        {
            get { return _StreetAddress; }
            set
            {
                if(_StreetAddress!=value){
                    _StreetAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StreetAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _City;
        public string City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _State;
        public string State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ZipCode;
        public string ZipCode
        {
            get { return _ZipCode; }
            set
            {
                if(_ZipCode!=value){
                    _ZipCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ZipCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GPSLocation;
        public string GPSLocation
        {
            get { return _GPSLocation; }
            set
            {
                if(_GPSLocation!=value){
                    _GPSLocation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GPSLocation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _IndexofComma;
        public double? IndexofComma
        {
            get { return _IndexofComma; }
            set
            {
                if(_IndexofComma!=value){
                    _IndexofComma=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IndexofComma");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _LengthofText;
        public double? LengthofText
        {
            get { return _LengthofText; }
            set
            {
                if(_LengthofText!=value){
                    _LengthofText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LengthofText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GPSLat;
        public string GPSLat
        {
            get { return _GPSLat; }
            set
            {
                if(_GPSLat!=value){
                    _GPSLat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GPSLat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GPSLong;
        public string GPSLong
        {
            get { return _GPSLong; }
            set
            {
                if(_GPSLong!=value){
                    _GPSLong=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GPSLong");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PointLongLatAlt;
        public string PointLongLatAlt
        {
            get { return _PointLongLatAlt; }
            set
            {
                if(_PointLongLatAlt!=value){
                    _PointLongLatAlt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PointLongLatAlt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _Capacity;
        public double? Capacity
        {
            get { return _Capacity; }
            set
            {
                if(_Capacity!=value){
                    _Capacity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Capacity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ncaaVenueImport, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SportsTeam table in the Meetball Database.
    /// </summary>
    public partial class SportsTeam: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SportsTeam> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SportsTeam>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SportsTeam> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SportsTeam item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SportsTeam item=new SportsTeam();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SportsTeam> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public SportsTeam(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SportsTeam.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsTeam>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SportsTeam(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SportsTeam(Expression<Func<SportsTeam, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SportsTeam> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<SportsTeam> _repo;
            
            if(db.TestMode){
                SportsTeam.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsTeam>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SportsTeam> GetRepo(){
            return GetRepo("","");
        }
        
        public static SportsTeam SingleOrDefault(Expression<Func<SportsTeam, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SportsTeam single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SportsTeam SingleOrDefault(Expression<Func<SportsTeam, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SportsTeam single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SportsTeam, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SportsTeam, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SportsTeam> Find(Expression<Func<SportsTeam, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SportsTeam> Find(Expression<Func<SportsTeam, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SportsTeam> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SportsTeam> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SportsTeam> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SportsTeam> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SportsTeam> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SportsTeam> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SportsTeamID";
        }

        public object KeyValue()
        {
            return this.SportsTeamID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SportsTeamLocation.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SportsTeam)){
                SportsTeam compare=(SportsTeam)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SportsTeamID;
        }
        
        public string DescriptorValue()
        {
                            return this.SportsTeamLocation.ToString();
                    }

        public string DescriptorColumn() {
            return "SportsTeamLocation";
        }
        public static string GetKeyColumn()
        {
            return "SportsTeamID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SportsTeamLocation";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Conference> Conferences
        {
            get
            {
                
                  var repo=DBDataAccess.Conference.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConferenceID == _ConferenceID
                       select items;
            }
        }

        public IQueryable<Division> Divisions
        {
            get
            {
                
                  var repo=DBDataAccess.Division.GetRepo();
                  return from items in repo.GetAll()
                       where items.DivisionID == _DivisionID
                       select items;
            }
        }

        public IQueryable<SportsEvent> SportsEvents
        {
            get
            {
                
                  var repo=DBDataAccess.SportsEvent.GetRepo();
                  return from items in repo.GetAll()
                       where items.HomeTeamID == _SportsTeamID
                       select items;
            }
        }

        public IQueryable<SportsEvent> SportsEvents3
        {
            get
            {
                
                  var repo=DBDataAccess.SportsEvent.GetRepo();
                  return from items in repo.GetAll()
                       where items.AwayTeamID == _SportsTeamID
                       select items;
            }
        }

        public IQueryable<SportsTeamXVenue> SportsTeamXVenues
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeamXVenue.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTeamID == _SportsTeamID
                       select items;
            }
        }

        public IQueryable<AppUserXSportsTeam> AppUserXSportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXSportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTeamID == _SportsTeamID
                       select items;
            }
        }

        public IQueryable<SportsType> SportsTypes
        {
            get
            {
                
                  var repo=DBDataAccess.SportsType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        #endregion
        

        int _SportsTeamID;
        public int SportsTeamID
        {
            get { return _SportsTeamID; }
            set
            {
                if(_SportsTeamID!=value){
                    _SportsTeamID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTeamID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SportsTeamLocation;
        public string SportsTeamLocation
        {
            get { return _SportsTeamLocation; }
            set
            {
                if(_SportsTeamLocation!=value){
                    _SportsTeamLocation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTeamLocation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SportsTeamName;
        public string SportsTeamName
        {
            get { return _SportsTeamName; }
            set
            {
                if(_SportsTeamName!=value){
                    _SportsTeamName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTeamName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SportsTeamAbbr;
        public string SportsTeamAbbr
        {
            get { return _SportsTeamAbbr; }
            set
            {
                if(_SportsTeamAbbr!=value){
                    _SportsTeamAbbr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTeamAbbr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DivisionID;
        public int? DivisionID
        {
            get { return _DivisionID; }
            set
            {
                if(_DivisionID!=value){
                    _DivisionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DivisionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mascot;
        public string Mascot
        {
            get { return _Mascot; }
            set
            {
                if(_Mascot!=value){
                    _Mascot=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mascot");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SportsTypeID;
        public int? SportsTypeID
        {
            get { return _SportsTypeID; }
            set
            {
                if(_SportsTypeID!=value){
                    _SportsTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ConferenceID;
        public int? ConferenceID
        {
            get { return _ConferenceID; }
            set
            {
                if(_ConferenceID!=value){
                    _ConferenceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConferenceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SportsTeam, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Sharing table in the Meetball Database.
    /// </summary>
    public partial class Sharing: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Sharing> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Sharing>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Sharing> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Sharing item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Sharing item=new Sharing();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Sharing> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Sharing(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Sharing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sharing>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Sharing(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Sharing(Expression<Func<Sharing, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Sharing> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Sharing> _repo;
            
            if(db.TestMode){
                Sharing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Sharing>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Sharing> GetRepo(){
            return GetRepo("","");
        }
        
        public static Sharing SingleOrDefault(Expression<Func<Sharing, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Sharing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Sharing SingleOrDefault(Expression<Func<Sharing, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Sharing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Sharing, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Sharing, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Sharing> Find(Expression<Func<Sharing, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Sharing> Find(Expression<Func<Sharing, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Sharing> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Sharing> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Sharing> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Sharing> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Sharing> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Sharing> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SharingID";
        }

        public object KeyValue()
        {
            return this.SharingID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SharingName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Sharing)){
                Sharing compare=(Sharing)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SharingID;
        }
        
        public string DescriptorValue()
        {
                            return this.SharingName.ToString();
                    }

        public string DescriptorColumn() {
            return "SharingName";
        }
        public static string GetKeyColumn()
        {
            return "SharingID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SharingName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUserDefault> AppUserDefaults
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserDefault.GetRepo();
                  return from items in repo.GetAll()
                       where items.MBSharingID == _SharingID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.SharingID == _SharingID
                       select items;
            }
        }

        #endregion
        

        int _SharingID;
        public int SharingID
        {
            get { return _SharingID; }
            set
            {
                if(_SharingID!=value){
                    _SharingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SharingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SharingName;
        public string SharingName
        {
            get { return _SharingName; }
            set
            {
                if(_SharingName!=value){
                    _SharingName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SharingName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Sharing, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Event table in the Meetball Database.
    /// </summary>
    public partial class Event: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Event> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Event>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Event> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Event item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Event item=new Event();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Event> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Event(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Event.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Event>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Event(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Event(Expression<Func<Event, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Event> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Event> _repo;
            
            if(db.TestMode){
                Event.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Event>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Event> GetRepo(){
            return GetRepo("","");
        }
        
        public static Event SingleOrDefault(Expression<Func<Event, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Event single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Event SingleOrDefault(Expression<Func<Event, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Event single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Event, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Event, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Event> Find(Expression<Func<Event, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Event> Find(Expression<Func<Event, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Event> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Event> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Event> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Event> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Event> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Event> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EventID";
        }

        public object KeyValue()
        {
            return this.EventID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EventName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Event)){
                Event compare=(Event)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EventID;
        }
        
        public string DescriptorValue()
        {
                            return this.EventName.ToString();
                    }

        public string DescriptorColumn() {
            return "EventName";
        }
        public static string GetKeyColumn()
        {
            return "EventID";
        }        
        public static string GetDescriptorColumn()
        {
            return "EventName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<EventXHashtag> EventXHashtags
        {
            get
            {
                
                  var repo=DBDataAccess.EventXHashtag.GetRepo();
                  return from items in repo.GetAll()
                       where items.EventID == _EventID
                       select items;
            }
        }

        public IQueryable<SportsEvent> SportsEvents
        {
            get
            {
                
                  var repo=DBDataAccess.SportsEvent.GetRepo();
                  return from items in repo.GetAll()
                       where items.EventID == _EventID
                       select items;
            }
        }

        public IQueryable<EventType> EventTypes
        {
            get
            {
                
                  var repo=DBDataAccess.EventType.GetRepo();
                  return from items in repo.GetAll()
                       where items.EventTypeID == _EventTypeID
                       select items;
            }
        }

        #endregion
        

        int _EventID;
        public int EventID
        {
            get { return _EventID; }
            set
            {
                if(_EventID!=value){
                    _EventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _EventTypeID;
        public int? EventTypeID
        {
            get { return _EventTypeID; }
            set
            {
                if(_EventTypeID!=value){
                    _EventTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EventName;
        public string EventName
        {
            get { return _EventName; }
            set
            {
                if(_EventName!=value){
                    _EventName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EventDescription;
        public string EventDescription
        {
            get { return _EventDescription; }
            set
            {
                if(_EventDescription!=value){
                    _EventDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EventDate;
        public DateTime? EventDate
        {
            get { return _EventDate; }
            set
            {
                if(_EventDate!=value){
                    _EventDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueID;
        public int? VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Event, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetBallVariable table in the Meetball Database.
    /// </summary>
    public partial class MeetBallVariable: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetBallVariable> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetBallVariable>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetBallVariable> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetBallVariable item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetBallVariable item=new MeetBallVariable();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetBallVariable> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetBallVariable(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetBallVariable.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetBallVariable>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetBallVariable(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetBallVariable(Expression<Func<MeetBallVariable, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetBallVariable> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetBallVariable> _repo;
            
            if(db.TestMode){
                MeetBallVariable.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetBallVariable>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetBallVariable> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetBallVariable SingleOrDefault(Expression<Func<MeetBallVariable, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetBallVariable single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetBallVariable SingleOrDefault(Expression<Func<MeetBallVariable, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetBallVariable single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetBallVariable, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetBallVariable, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetBallVariable> Find(Expression<Func<MeetBallVariable, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetBallVariable> Find(Expression<Func<MeetBallVariable, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetBallVariable> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetBallVariable> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetBallVariable> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetBallVariable> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetBallVariable> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetBallVariable> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetBallVariableId";
        }

        public object KeyValue()
        {
            return this.MeetBallVariableId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetBallVariable)){
                MeetBallVariable compare=(MeetBallVariable)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetBallVariableId;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "MeetBallVariableId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _MeetBallVariableId;
        public int MeetBallVariableId
        {
            get { return _MeetBallVariableId; }
            set
            {
                if(_MeetBallVariableId!=value){
                    _MeetBallVariableId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetBallVariableId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Value;
        public string Value
        {
            get { return _Value; }
            set
            {
                if(_Value!=value){
                    _Value=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Value");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetBallVariable, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the FriendGroup table in the Meetball Database.
    /// </summary>
    public partial class FriendGroup: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<FriendGroup> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<FriendGroup>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<FriendGroup> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(FriendGroup item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                FriendGroup item=new FriendGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<FriendGroup> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public FriendGroup(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                FriendGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FriendGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public FriendGroup(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public FriendGroup(Expression<Func<FriendGroup, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<FriendGroup> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<FriendGroup> _repo;
            
            if(db.TestMode){
                FriendGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FriendGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<FriendGroup> GetRepo(){
            return GetRepo("","");
        }
        
        public static FriendGroup SingleOrDefault(Expression<Func<FriendGroup, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            FriendGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static FriendGroup SingleOrDefault(Expression<Func<FriendGroup, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            FriendGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<FriendGroup, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<FriendGroup, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<FriendGroup> Find(Expression<Func<FriendGroup, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<FriendGroup> Find(Expression<Func<FriendGroup, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<FriendGroup> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<FriendGroup> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<FriendGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<FriendGroup> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<FriendGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<FriendGroup> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FriendGroupID";
        }

        public object KeyValue()
        {
            return this.FriendGroupID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FriendGroupName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(FriendGroup)){
                FriendGroup compare=(FriendGroup)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FriendGroupID;
        }
        
        public string DescriptorValue()
        {
                            return this.FriendGroupName.ToString();
                    }

        public string DescriptorColumn() {
            return "FriendGroupName";
        }
        public static string GetKeyColumn()
        {
            return "FriendGroupID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FriendGroupName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<FriendGroupXFriendAppUser> FriendGroupXFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.FriendGroupXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.FriendGroupID == _FriendGroupID
                       select items;
            }
        }

        #endregion
        

        int _FriendGroupID;
        public int FriendGroupID
        {
            get { return _FriendGroupID; }
            set
            {
                if(_FriendGroupID!=value){
                    _FriendGroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendGroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FriendGroupName;
        public string FriendGroupName
        {
            get { return _FriendGroupName; }
            set
            {
                if(_FriendGroupName!=value){
                    _FriendGroupName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendGroupName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FriendGroupDescription;
        public string FriendGroupDescription
        {
            get { return _FriendGroupDescription; }
            set
            {
                if(_FriendGroupDescription!=value){
                    _FriendGroupDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendGroupDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Private;
        public bool? Private
        {
            get { return _Private; }
            set
            {
                if(_Private!=value){
                    _Private=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Private");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<FriendGroup, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Conference table in the Meetball Database.
    /// </summary>
    public partial class Conference: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Conference> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Conference>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Conference> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Conference item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Conference item=new Conference();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Conference> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Conference(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Conference.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Conference>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Conference(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Conference(Expression<Func<Conference, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Conference> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Conference> _repo;
            
            if(db.TestMode){
                Conference.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Conference>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Conference> GetRepo(){
            return GetRepo("","");
        }
        
        public static Conference SingleOrDefault(Expression<Func<Conference, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Conference single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Conference SingleOrDefault(Expression<Func<Conference, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Conference single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Conference, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Conference, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Conference> Find(Expression<Func<Conference, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Conference> Find(Expression<Func<Conference, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Conference> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Conference> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Conference> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Conference> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Conference> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Conference> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ConferenceID";
        }

        public object KeyValue()
        {
            return this.ConferenceID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ConferenceName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Conference)){
                Conference compare=(Conference)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ConferenceID;
        }
        
        public string DescriptorValue()
        {
                            return this.ConferenceName.ToString();
                    }

        public string DescriptorColumn() {
            return "ConferenceName";
        }
        public static string GetKeyColumn()
        {
            return "ConferenceID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ConferenceName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SportsTeam> SportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConferenceID == _ConferenceID
                       select items;
            }
        }

        public IQueryable<SportsType> SportsTypes
        {
            get
            {
                
                  var repo=DBDataAccess.SportsType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        #endregion
        

        int _ConferenceID;
        public int ConferenceID
        {
            get { return _ConferenceID; }
            set
            {
                if(_ConferenceID!=value){
                    _ConferenceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConferenceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SportsTypeID;
        public int? SportsTypeID
        {
            get { return _SportsTypeID; }
            set
            {
                if(_SportsTypeID!=value){
                    _SportsTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ConferenceName;
        public string ConferenceName
        {
            get { return _ConferenceName; }
            set
            {
                if(_ConferenceName!=value){
                    _ConferenceName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConferenceName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ConferenceAbbr;
        public string ConferenceAbbr
        {
            get { return _ConferenceAbbr; }
            set
            {
                if(_ConferenceAbbr!=value){
                    _ConferenceAbbr=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConferenceAbbr");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Conference, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the FriendGroupXFriendAppUser table in the Meetball Database.
    /// </summary>
    public partial class FriendGroupXFriendAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<FriendGroupXFriendAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<FriendGroupXFriendAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<FriendGroupXFriendAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(FriendGroupXFriendAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                FriendGroupXFriendAppUser item=new FriendGroupXFriendAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<FriendGroupXFriendAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public FriendGroupXFriendAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                FriendGroupXFriendAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FriendGroupXFriendAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public FriendGroupXFriendAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public FriendGroupXFriendAppUser(Expression<Func<FriendGroupXFriendAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<FriendGroupXFriendAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<FriendGroupXFriendAppUser> _repo;
            
            if(db.TestMode){
                FriendGroupXFriendAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FriendGroupXFriendAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<FriendGroupXFriendAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static FriendGroupXFriendAppUser SingleOrDefault(Expression<Func<FriendGroupXFriendAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            FriendGroupXFriendAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static FriendGroupXFriendAppUser SingleOrDefault(Expression<Func<FriendGroupXFriendAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            FriendGroupXFriendAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<FriendGroupXFriendAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<FriendGroupXFriendAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<FriendGroupXFriendAppUser> Find(Expression<Func<FriendGroupXFriendAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<FriendGroupXFriendAppUser> Find(Expression<Func<FriendGroupXFriendAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<FriendGroupXFriendAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<FriendGroupXFriendAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<FriendGroupXFriendAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<FriendGroupXFriendAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<FriendGroupXFriendAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<FriendGroupXFriendAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FriendAppUserID";
        }

        public object KeyValue()
        {
            return this.FriendAppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FriendAppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(FriendGroupXFriendAppUser)){
                FriendGroupXFriendAppUser compare=(FriendGroupXFriendAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FriendAppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.FriendAppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "FriendAppUserID";
        }
        public static string GetKeyColumn()
        {
            return "FriendAppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FriendAppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _FriendAppUserID
                       select items;
            }
        }

        public IQueryable<FriendGroup> FriendGroups
        {
            get
            {
                
                  var repo=DBDataAccess.FriendGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.FriendGroupID == _FriendGroupID
                       select items;
            }
        }

        #endregion
        

        int _FriendGroupID;
        public int FriendGroupID
        {
            get { return _FriendGroupID; }
            set
            {
                if(_FriendGroupID!=value){
                    _FriendGroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendGroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _FriendAppUserID;
        public int FriendAppUserID
        {
            get { return _FriendAppUserID; }
            set
            {
                if(_FriendAppUserID!=value){
                    _FriendAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<FriendGroupXFriendAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the LocationSharing table in the Meetball Database.
    /// </summary>
    public partial class LocationSharing: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<LocationSharing> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<LocationSharing>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<LocationSharing> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(LocationSharing item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                LocationSharing item=new LocationSharing();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<LocationSharing> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public LocationSharing(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                LocationSharing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LocationSharing>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public LocationSharing(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public LocationSharing(Expression<Func<LocationSharing, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<LocationSharing> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<LocationSharing> _repo;
            
            if(db.TestMode){
                LocationSharing.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LocationSharing>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<LocationSharing> GetRepo(){
            return GetRepo("","");
        }
        
        public static LocationSharing SingleOrDefault(Expression<Func<LocationSharing, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            LocationSharing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static LocationSharing SingleOrDefault(Expression<Func<LocationSharing, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            LocationSharing single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<LocationSharing, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<LocationSharing, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<LocationSharing> Find(Expression<Func<LocationSharing, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<LocationSharing> Find(Expression<Func<LocationSharing, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<LocationSharing> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<LocationSharing> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<LocationSharing> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<LocationSharing> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<LocationSharing> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<LocationSharing> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "LocationSharingID";
        }

        public object KeyValue()
        {
            return this.LocationSharingID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.LocationSharingName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(LocationSharing)){
                LocationSharing compare=(LocationSharing)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.LocationSharingID;
        }
        
        public string DescriptorValue()
        {
                            return this.LocationSharingName.ToString();
                    }

        public string DescriptorColumn() {
            return "LocationSharingName";
        }
        public static string GetKeyColumn()
        {
            return "LocationSharingID";
        }        
        public static string GetDescriptorColumn()
        {
            return "LocationSharingName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUserDefault> AppUserDefaults
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserDefault.GetRepo();
                  return from items in repo.GetAll()
                       where items.MBRLocationSharingID == _LocationSharingID
                       select items;
            }
        }

        public IQueryable<MeetballResponse> MeetballResponses
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationSharingID == _LocationSharingID
                       select items;
            }
        }

        #endregion
        

        int _LocationSharingID;
        public int LocationSharingID
        {
            get { return _LocationSharingID; }
            set
            {
                if(_LocationSharingID!=value){
                    _LocationSharingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationSharingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocationSharingName;
        public string LocationSharingName
        {
            get { return _LocationSharingName; }
            set
            {
                if(_LocationSharingName!=value){
                    _LocationSharingName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationSharingName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<LocationSharing, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUser table in the Meetball Database.
    /// </summary>
    public partial class AppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUser item=new AppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUser(Expression<Func<AppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUser> _repo;
            
            if(db.TestMode){
                AppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUser SingleOrDefault(Expression<Func<AppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUser SingleOrDefault(Expression<Func<AppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUser> Find(Expression<Func<AppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUser> Find(Expression<Func<AppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FirstName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUser)){
                AppUser compare=(AppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.FirstName.ToString();
                    }

        public string DescriptorColumn() {
            return "FirstName";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FirstName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<MessageMB> MessageMBs
        {
            get
            {
                
                  var repo=DBDataAccess.MessageMB.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<ConvoXAppUser> ConvoXAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.ConvoXAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Notification> Notifications
        {
            get
            {
                
                  var repo=DBDataAccess.Notification.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Notification> Notifications3
        {
            get
            {
                
                  var repo=DBDataAccess.Notification.GetRepo();
                  return from items in repo.GetAll()
                       where items.NotificationAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<PhoneAppUser> PhoneAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.PhoneAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserId == _AppUserID
                       select items;
            }
        }

        public IQueryable<ContactImport> ContactImports
        {
            get
            {
                
                  var repo=DBDataAccess.ContactImport.GetRepo();
                  return from items in repo.GetAll()
                       where items.ImportAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserXNotPossibleFriendAppUser> AppUserXNotPossibleFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXNotPossibleFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserXNotPossibleFriendAppUser> AppUserXNotPossibleFriendAppUsers7
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXNotPossibleFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.NotPossibleAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<FriendGroup> FriendGroups
        {
            get
            {
                
                  var repo=DBDataAccess.FriendGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<FriendGroupXFriendAppUser> FriendGroupXFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.FriendGroupXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.FriendAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<TwitterAppUser> TwitterAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.TwitterAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserDefault> AppUserDefaults
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserDefault.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<VenueXAppUser> VenueXAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.VenueXAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserOffPlatform> AppUserOffPlatforms
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserOffPlatform.GetRepo();
                  return from items in repo.GetAll()
                       where items.OwnerAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserXPhone> AppUserXPhones
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXPhone.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserPush> AppUserPushes
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserPush.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserLog> AppUserLogs
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetballTracking> MeetballTrackings
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballTracking.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<EmailLog> EmailLogs
        {
            get
            {
                
                  var repo=DBDataAccess.EmailLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.ToAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<EmailLog> EmailLogs19
        {
            get
            {
                
                  var repo=DBDataAccess.EmailLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.FromAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetballComment> MeetballComments
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.ToAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetballResponse> MeetballResponses
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetballResponse> MeetballResponses22
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.InvitedByAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<FBAppUser> FBAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.FBAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppSession> AppSessions
        {
            get
            {
                
                  var repo=DBDataAccess.AppSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserId == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserXSportsTeam> AppUserXSportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXSportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Broadcast> Broadcasts
        {
            get
            {
                
                  var repo=DBDataAccess.Broadcast.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserXFriendAppUser> AppUserXFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserXFriendAppUser> AppUserXFriendAppUsers28
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.FriendAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserActivityLog> AppUserActivityLogs
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserActivityLog> AppUserActivityLogs30
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.RelatedAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetballOwner> MeetballOwners
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballOwner.GetRepo();
                  return from items in repo.GetAll()
                       where items.OwnerAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetballComment> MeetballComments32
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserMerge> AppUserMerges
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserMerge.GetRepo();
                  return from items in repo.GetAll()
                       where items.MergedAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserMerge> AppUserMerges34
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserMerge.GetRepo();
                  return from items in repo.GetAll()
                       where items.ActiveAppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<EmailAppUser> EmailAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.EmailAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Message> Messages
        {
            get
            {
                
                  var repo=DBDataAccess.Message.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<TimeZone> TimeZones
        {
            get
            {
                
                  var repo=DBDataAccess.TimeZone.GetRepo();
                  return from items in repo.GetAll()
                       where items.TimeZoneID == _TimeZoneID
                       select items;
            }
        }

        #endregion
        

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FirstName;
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if(_FirstName!=value){
                    _FirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastName;
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if(_LastName!=value){
                    _LastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _PasswordResetRequired;
        public bool? PasswordResetRequired
        {
            get { return _PasswordResetRequired; }
            set
            {
                if(_PasswordResetRequired!=value){
                    _PasswordResetRequired=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PasswordResetRequired");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Activated;
        public bool? Activated
        {
            get { return _Activated; }
            set
            {
                if(_Activated!=value){
                    _Activated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Activated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FacebookID;
        public string FacebookID
        {
            get { return _FacebookID; }
            set
            {
                if(_FacebookID!=value){
                    _FacebookID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FacebookID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ParseUserID;
        public string ParseUserID
        {
            get { return _ParseUserID; }
            set
            {
                if(_ParseUserID!=value){
                    _ParseUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParseUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Facebook;
        public bool? Facebook
        {
            get { return _Facebook; }
            set
            {
                if(_Facebook!=value){
                    _Facebook=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Facebook");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _TimeZoneID;
        public int? TimeZoneID
        {
            get { return _TimeZoneID; }
            set
            {
                if(_TimeZoneID!=value){
                    _TimeZoneID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimeZoneID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Handle;
        public string Handle
        {
            get { return _Handle; }
            set
            {
                if(_Handle!=value){
                    _Handle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Handle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DefaultPhoneId;
        public int? DefaultPhoneId
        {
            get { return _DefaultPhoneId; }
            set
            {
                if(_DefaultPhoneId!=value){
                    _DefaultPhoneId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultPhoneId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsInternal;
        public bool? IsInternal
        {
            get { return _IsInternal; }
            set
            {
                if(_IsInternal!=value){
                    _IsInternal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsInternal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TwitterID;
        public string TwitterID
        {
            get { return _TwitterID; }
            set
            {
                if(_TwitterID!=value){
                    _TwitterID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TwitterID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Twitter;
        public bool? Twitter
        {
            get { return _Twitter; }
            set
            {
                if(_Twitter!=value){
                    _Twitter=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Twitter");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Avatar;
        public string Avatar
        {
            get { return _Avatar; }
            set
            {
                if(_Avatar!=value){
                    _Avatar=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Avatar");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayName;
        public string DisplayName
        {
            get { return _DisplayName; }
            set
            {
                if(_DisplayName!=value){
                    _DisplayName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Activity;
        public int? Activity
        {
            get { return _Activity; }
            set
            {
                if(_Activity!=value){
                    _Activity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Activity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastXrefDate;
        public DateTime? LastXrefDate
        {
            get { return _LastXrefDate; }
            set
            {
                if(_LastXrefDate!=value){
                    _LastXrefDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastXrefDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TwitterAppUser table in the Meetball Database.
    /// </summary>
    public partial class TwitterAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TwitterAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TwitterAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TwitterAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TwitterAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TwitterAppUser item=new TwitterAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TwitterAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public TwitterAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TwitterAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TwitterAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TwitterAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TwitterAppUser(Expression<Func<TwitterAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TwitterAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<TwitterAppUser> _repo;
            
            if(db.TestMode){
                TwitterAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TwitterAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TwitterAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static TwitterAppUser SingleOrDefault(Expression<Func<TwitterAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TwitterAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TwitterAppUser SingleOrDefault(Expression<Func<TwitterAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TwitterAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TwitterAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TwitterAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TwitterAppUser> Find(Expression<Func<TwitterAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TwitterAppUser> Find(Expression<Func<TwitterAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TwitterAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TwitterAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TwitterAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TwitterAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TwitterAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TwitterAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "TwitterAppUserID";
        }

        public object KeyValue()
        {
            return this.TwitterAppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FirstName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TwitterAppUser)){
                TwitterAppUser compare=(TwitterAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.TwitterAppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.FirstName.ToString();
                    }

        public string DescriptorColumn() {
            return "FirstName";
        }
        public static string GetKeyColumn()
        {
            return "TwitterAppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FirstName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        #endregion
        

        int _TwitterAppUserID;
        public int TwitterAppUserID
        {
            get { return _TwitterAppUserID; }
            set
            {
                if(_TwitterAppUserID!=value){
                    _TwitterAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TwitterAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FirstName;
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if(_FirstName!=value){
                    _FirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastName;
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if(_LastName!=value){
                    _LastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ScreenName;
        public string ScreenName
        {
            get { return _ScreenName; }
            set
            {
                if(_ScreenName!=value){
                    _ScreenName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ScreenName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Location;
        public string Location
        {
            get { return _Location; }
            set
            {
                if(_Location!=value){
                    _Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _URL;
        public string URL
        {
            get { return _URL; }
            set
            {
                if(_URL!=value){
                    _URL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="URL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Protected;
        public bool? Protected
        {
            get { return _Protected; }
            set
            {
                if(_Protected!=value){
                    _Protected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Protected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreatedAt;
        public DateTime? CreatedAt
        {
            get { return _CreatedAt; }
            set
            {
                if(_CreatedAt!=value){
                    _CreatedAt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedAt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UTCOffset;
        public string UTCOffset
        {
            get { return _UTCOffset; }
            set
            {
                if(_UTCOffset!=value){
                    _UTCOffset=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UTCOffset");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TimeZone;
        public string TimeZone
        {
            get { return _TimeZone; }
            set
            {
                if(_TimeZone!=value){
                    _TimeZone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TimeZone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Verified;
        public bool? Verified
        {
            get { return _Verified; }
            set
            {
                if(_Verified!=value){
                    _Verified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Verified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Language;
        public string Language
        {
            get { return _Language; }
            set
            {
                if(_Language!=value){
                    _Language=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Language");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TwitterAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Venue table in the Meetball Database.
    /// </summary>
    public partial class Venue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Venue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Venue>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Venue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Venue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Venue item=new Venue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Venue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Venue(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Venue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Venue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Venue(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Venue(Expression<Func<Venue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Venue> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Venue> _repo;
            
            if(db.TestMode){
                Venue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Venue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Venue> GetRepo(){
            return GetRepo("","");
        }
        
        public static Venue SingleOrDefault(Expression<Func<Venue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Venue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Venue SingleOrDefault(Expression<Func<Venue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Venue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Venue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Venue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Venue> Find(Expression<Func<Venue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Venue> Find(Expression<Func<Venue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Venue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Venue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Venue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Venue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Venue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Venue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "VenueID";
        }

        public object KeyValue()
        {
            return this.VenueID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.VenueName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Venue)){
                Venue compare=(Venue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.VenueID;
        }
        
        public string DescriptorValue()
        {
                            return this.VenueName.ToString();
                    }

        public string DescriptorColumn() {
            return "VenueName";
        }
        public static string GetKeyColumn()
        {
            return "VenueID";
        }        
        public static string GetDescriptorColumn()
        {
            return "VenueName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GPXType> GPXTypes
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _VenueGPXTypeID
                       select items;
            }
        }

        public IQueryable<VenueXAppUser> VenueXAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.VenueXAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        public IQueryable<VenueLot> VenueLots
        {
            get
            {
                
                  var repo=DBDataAccess.VenueLot.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        public IQueryable<SportsTeamXVenue> SportsTeamXVenues
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeamXVenue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        public IQueryable<Subvenue> Subvenues
        {
            get
            {
                
                  var repo=DBDataAccess.Subvenue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        public IQueryable<VenueType> VenueTypes
        {
            get
            {
                
                  var repo=DBDataAccess.VenueType.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueTypeID == _VenueTypeID
                       select items;
            }
        }

        #endregion
        

        int _VenueID;
        public int VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueName;
        public string VenueName
        {
            get { return _VenueName; }
            set
            {
                if(_VenueName!=value){
                    _VenueName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueTypeID;
        public int? VenueTypeID
        {
            get { return _VenueTypeID; }
            set
            {
                if(_VenueTypeID!=value){
                    _VenueTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address1;
        public string Address1
        {
            get { return _Address1; }
            set
            {
                if(_Address1!=value){
                    _Address1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address2;
        public string Address2
        {
            get { return _Address2; }
            set
            {
                if(_Address2!=value){
                    _Address2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _City;
        public string City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _State;
        public string State
        {
            get { return _State; }
            set
            {
                if(_State!=value){
                    _State=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="State");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ZipCode;
        public string ZipCode
        {
            get { return _ZipCode; }
            set
            {
                if(_ZipCode!=value){
                    _ZipCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ZipCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueGPXWKT;
        public string VenueGPXWKT
        {
            get { return _VenueGPXWKT; }
            set
            {
                if(_VenueGPXWKT!=value){
                    _VenueGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueGPXTypeID;
        public int? VenueGPXTypeID
        {
            get { return _VenueGPXTypeID; }
            set
            {
                if(_VenueGPXTypeID!=value){
                    _VenueGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _Capacity;
        public decimal? Capacity
        {
            get { return _Capacity; }
            set
            {
                if(_Capacity!=value){
                    _Capacity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Capacity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Venue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Response table in the Meetball Database.
    /// </summary>
    public partial class Response: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Response> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Response>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Response> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Response item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Response item=new Response();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Response> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Response(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Response.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Response>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Response(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Response(Expression<Func<Response, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Response> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Response> _repo;
            
            if(db.TestMode){
                Response.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Response>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Response> GetRepo(){
            return GetRepo("","");
        }
        
        public static Response SingleOrDefault(Expression<Func<Response, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Response single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Response SingleOrDefault(Expression<Func<Response, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Response single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Response, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Response, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Response> Find(Expression<Func<Response, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Response> Find(Expression<Func<Response, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Response> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Response> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Response> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Response> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Response> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Response> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ResponseID";
        }

        public object KeyValue()
        {
            return this.ResponseID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ResponseName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Response)){
                Response compare=(Response)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ResponseID;
        }
        
        public string DescriptorValue()
        {
                            return this.ResponseName.ToString();
                    }

        public string DescriptorColumn() {
            return "ResponseName";
        }
        public static string GetKeyColumn()
        {
            return "ResponseID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ResponseName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<MeetballResponseLog> MeetballResponseLogs
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponseLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.ResponseID == _ResponseID
                       select items;
            }
        }

        public IQueryable<MeetballResponse> MeetballResponses
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.ResponseID == _ResponseID
                       select items;
            }
        }

        #endregion
        

        int _ResponseID;
        public int ResponseID
        {
            get { return _ResponseID; }
            set
            {
                if(_ResponseID!=value){
                    _ResponseID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResponseID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ResponseName;
        public string ResponseName
        {
            get { return _ResponseName; }
            set
            {
                if(_ResponseName!=value){
                    _ResponseName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResponseName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Response, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the VenueLot table in the Meetball Database.
    /// </summary>
    public partial class VenueLot: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<VenueLot> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<VenueLot>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<VenueLot> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(VenueLot item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                VenueLot item=new VenueLot();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<VenueLot> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public VenueLot(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                VenueLot.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueLot>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public VenueLot(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public VenueLot(Expression<Func<VenueLot, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<VenueLot> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<VenueLot> _repo;
            
            if(db.TestMode){
                VenueLot.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueLot>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<VenueLot> GetRepo(){
            return GetRepo("","");
        }
        
        public static VenueLot SingleOrDefault(Expression<Func<VenueLot, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            VenueLot single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static VenueLot SingleOrDefault(Expression<Func<VenueLot, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            VenueLot single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<VenueLot, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<VenueLot, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<VenueLot> Find(Expression<Func<VenueLot, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<VenueLot> Find(Expression<Func<VenueLot, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<VenueLot> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<VenueLot> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<VenueLot> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<VenueLot> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<VenueLot> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<VenueLot> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "VenueLotID";
        }

        public object KeyValue()
        {
            return this.VenueLotID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.VenueLotName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(VenueLot)){
                VenueLot compare=(VenueLot)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.VenueLotID;
        }
        
        public string DescriptorValue()
        {
                            return this.VenueLotName.ToString();
                    }

        public string DescriptorColumn() {
            return "VenueLotName";
        }
        public static string GetKeyColumn()
        {
            return "VenueLotID";
        }        
        public static string GetDescriptorColumn()
        {
            return "VenueLotName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GPXType> GPXTypes
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _VenueLotGPXTypeID
                       select items;
            }
        }

        public IQueryable<Venue> Venues
        {
            get
            {
                
                  var repo=DBDataAccess.Venue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        #endregion
        

        int _VenueLotID;
        public int VenueLotID
        {
            get { return _VenueLotID; }
            set
            {
                if(_VenueLotID!=value){
                    _VenueLotID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueLotID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueID;
        public int? VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueLotName;
        public string VenueLotName
        {
            get { return _VenueLotName; }
            set
            {
                if(_VenueLotName!=value){
                    _VenueLotName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueLotName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueLotGPXWKT;
        public string VenueLotGPXWKT
        {
            get { return _VenueLotGPXWKT; }
            set
            {
                if(_VenueLotGPXWKT!=value){
                    _VenueLotGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueLotGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueLotGPXTypeID;
        public int? VenueLotGPXTypeID
        {
            get { return _VenueLotGPXTypeID; }
            set
            {
                if(_VenueLotGPXTypeID!=value){
                    _VenueLotGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueLotGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<VenueLot, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserDefault table in the Meetball Database.
    /// </summary>
    public partial class AppUserDefault: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserDefault> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserDefault>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserDefault> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserDefault item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserDefault item=new AppUserDefault();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserDefault> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserDefault(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserDefault.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserDefault>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserDefault(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserDefault(Expression<Func<AppUserDefault, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserDefault> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserDefault> _repo;
            
            if(db.TestMode){
                AppUserDefault.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserDefault>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserDefault> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserDefault SingleOrDefault(Expression<Func<AppUserDefault, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserDefault single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserDefault SingleOrDefault(Expression<Func<AppUserDefault, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserDefault single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserDefault, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserDefault, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserDefault> Find(Expression<Func<AppUserDefault, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserDefault> Find(Expression<Func<AppUserDefault, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserDefault> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserDefault> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserDefault> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserDefault> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserDefault> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserDefault> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserDefaultID";
        }

        public object KeyValue()
        {
            return this.AppUserDefaultID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserDefault)){
                AppUserDefault compare=(AppUserDefault)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserDefaultID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserDefaultID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<LocationSharing> LocationSharings
        {
            get
            {
                
                  var repo=DBDataAccess.LocationSharing.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationSharingID == _MBRLocationSharingID
                       select items;
            }
        }

        public IQueryable<Sharing> Sharings
        {
            get
            {
                
                  var repo=DBDataAccess.Sharing.GetRepo();
                  return from items in repo.GetAll()
                       where items.SharingID == _MBSharingID
                       select items;
            }
        }

        #endregion
        

        int _AppUserDefaultID;
        public int AppUserDefaultID
        {
            get { return _AppUserDefaultID; }
            set
            {
                if(_AppUserDefaultID!=value){
                    _AppUserDefaultID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserDefaultID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _MBPrivate;
        public bool? MBPrivate
        {
            get { return _MBPrivate; }
            set
            {
                if(_MBPrivate!=value){
                    _MBPrivate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBPrivate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MBSharingID;
        public int? MBSharingID
        {
            get { return _MBSharingID; }
            set
            {
                if(_MBSharingID!=value){
                    _MBSharingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBSharingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MBRLocationSharingID;
        public int? MBRLocationSharingID
        {
            get { return _MBRLocationSharingID; }
            set
            {
                if(_MBRLocationSharingID!=value){
                    _MBRLocationSharingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBRLocationSharingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _AppUserPushNotification;
        public bool? AppUserPushNotification
        {
            get { return _AppUserPushNotification; }
            set
            {
                if(_AppUserPushNotification!=value){
                    _AppUserPushNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserPushNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _AppUserEmailNotification;
        public bool? AppUserEmailNotification
        {
            get { return _AppUserEmailNotification; }
            set
            {
                if(_AppUserEmailNotification!=value){
                    _AppUserEmailNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserEmailNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _AppUserTextNotification;
        public bool? AppUserTextNotification
        {
            get { return _AppUserTextNotification; }
            set
            {
                if(_AppUserTextNotification!=value){
                    _AppUserTextNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserTextNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _AppUserFBNotification;
        public bool? AppUserFBNotification
        {
            get { return _AppUserFBNotification; }
            set
            {
                if(_AppUserFBNotification!=value){
                    _AppUserFBNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserFBNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _AppUserTwitterNotification;
        public bool? AppUserTwitterNotification
        {
            get { return _AppUserTwitterNotification; }
            set
            {
                if(_AppUserTwitterNotification!=value){
                    _AppUserTwitterNotification=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserTwitterNotification");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserDefault, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the VenueXAppUserStatus table in the Meetball Database.
    /// </summary>
    public partial class VenueXAppUserStatus: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<VenueXAppUserStatus> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<VenueXAppUserStatus>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<VenueXAppUserStatus> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(VenueXAppUserStatus item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                VenueXAppUserStatus item=new VenueXAppUserStatus();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<VenueXAppUserStatus> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public VenueXAppUserStatus(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                VenueXAppUserStatus.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueXAppUserStatus>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public VenueXAppUserStatus(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public VenueXAppUserStatus(Expression<Func<VenueXAppUserStatus, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<VenueXAppUserStatus> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<VenueXAppUserStatus> _repo;
            
            if(db.TestMode){
                VenueXAppUserStatus.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueXAppUserStatus>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<VenueXAppUserStatus> GetRepo(){
            return GetRepo("","");
        }
        
        public static VenueXAppUserStatus SingleOrDefault(Expression<Func<VenueXAppUserStatus, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            VenueXAppUserStatus single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static VenueXAppUserStatus SingleOrDefault(Expression<Func<VenueXAppUserStatus, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            VenueXAppUserStatus single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<VenueXAppUserStatus, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<VenueXAppUserStatus, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<VenueXAppUserStatus> Find(Expression<Func<VenueXAppUserStatus, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<VenueXAppUserStatus> Find(Expression<Func<VenueXAppUserStatus, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<VenueXAppUserStatus> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<VenueXAppUserStatus> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<VenueXAppUserStatus> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<VenueXAppUserStatus> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<VenueXAppUserStatus> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<VenueXAppUserStatus> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "VenueXAppUserStatusID";
        }

        public object KeyValue()
        {
            return this.VenueXAppUserStatusID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.VenueXAppUserStatusName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(VenueXAppUserStatus)){
                VenueXAppUserStatus compare=(VenueXAppUserStatus)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.VenueXAppUserStatusID;
        }
        
        public string DescriptorValue()
        {
                            return this.VenueXAppUserStatusName.ToString();
                    }

        public string DescriptorColumn() {
            return "VenueXAppUserStatusName";
        }
        public static string GetKeyColumn()
        {
            return "VenueXAppUserStatusID";
        }        
        public static string GetDescriptorColumn()
        {
            return "VenueXAppUserStatusName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<VenueXAppUser> VenueXAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.VenueXAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.StatusID == _VenueXAppUserStatusID
                       select items;
            }
        }

        #endregion
        

        int _VenueXAppUserStatusID;
        public int VenueXAppUserStatusID
        {
            get { return _VenueXAppUserStatusID; }
            set
            {
                if(_VenueXAppUserStatusID!=value){
                    _VenueXAppUserStatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueXAppUserStatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueXAppUserStatusName;
        public string VenueXAppUserStatusName
        {
            get { return _VenueXAppUserStatusName; }
            set
            {
                if(_VenueXAppUserStatusName!=value){
                    _VenueXAppUserStatusName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueXAppUserStatusName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<VenueXAppUserStatus, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SportsEvent table in the Meetball Database.
    /// </summary>
    public partial class SportsEvent: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SportsEvent> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SportsEvent>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SportsEvent> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SportsEvent item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SportsEvent item=new SportsEvent();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SportsEvent> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public SportsEvent(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SportsEvent.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsEvent>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SportsEvent(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SportsEvent(Expression<Func<SportsEvent, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SportsEvent> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<SportsEvent> _repo;
            
            if(db.TestMode){
                SportsEvent.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsEvent>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SportsEvent> GetRepo(){
            return GetRepo("","");
        }
        
        public static SportsEvent SingleOrDefault(Expression<Func<SportsEvent, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SportsEvent single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SportsEvent SingleOrDefault(Expression<Func<SportsEvent, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SportsEvent single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SportsEvent, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SportsEvent, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SportsEvent> Find(Expression<Func<SportsEvent, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SportsEvent> Find(Expression<Func<SportsEvent, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SportsEvent> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SportsEvent> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SportsEvent> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SportsEvent> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SportsEvent> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SportsEvent> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SportsEventID";
        }

        public object KeyValue()
        {
            return this.SportsEventID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EventID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SportsEvent)){
                SportsEvent compare=(SportsEvent)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SportsEventID;
        }
        
        public string DescriptorValue()
        {
                            return this.EventID.ToString();
                    }

        public string DescriptorColumn() {
            return "EventID";
        }
        public static string GetKeyColumn()
        {
            return "SportsEventID";
        }        
        public static string GetDescriptorColumn()
        {
            return "EventID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Event> Events
        {
            get
            {
                
                  var repo=DBDataAccess.Event.GetRepo();
                  return from items in repo.GetAll()
                       where items.EventID == _EventID
                       select items;
            }
        }

        public IQueryable<SportsEventType> SportsEventTypes
        {
            get
            {
                
                  var repo=DBDataAccess.SportsEventType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsEventTypeID == _SportsEventTypeID
                       select items;
            }
        }

        public IQueryable<SportsTeam> SportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTeamID == _HomeTeamID
                       select items;
            }
        }

        public IQueryable<SportsTeam> SportsTeams3
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTeamID == _AwayTeamID
                       select items;
            }
        }

        public IQueryable<SportsType> SportsTypes
        {
            get
            {
                
                  var repo=DBDataAccess.SportsType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTypeID == _SportsTypeID
                       select items;
            }
        }

        #endregion
        

        int _SportsEventID;
        public int SportsEventID
        {
            get { return _SportsEventID; }
            set
            {
                if(_SportsEventID!=value){
                    _SportsEventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsEventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _EventID;
        public int? EventID
        {
            get { return _EventID; }
            set
            {
                if(_EventID!=value){
                    _EventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _HomeTeamID;
        public int? HomeTeamID
        {
            get { return _HomeTeamID; }
            set
            {
                if(_HomeTeamID!=value){
                    _HomeTeamID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HomeTeamID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AwayTeamID;
        public int? AwayTeamID
        {
            get { return _AwayTeamID; }
            set
            {
                if(_AwayTeamID!=value){
                    _AwayTeamID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AwayTeamID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SportsTypeID;
        public int? SportsTypeID
        {
            get { return _SportsTypeID; }
            set
            {
                if(_SportsTypeID!=value){
                    _SportsTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SportsEventTypeID;
        public int? SportsEventTypeID
        {
            get { return _SportsEventTypeID; }
            set
            {
                if(_SportsEventTypeID!=value){
                    _SportsEventTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsEventTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SportsEvent, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the VenueXAppUser table in the Meetball Database.
    /// </summary>
    public partial class VenueXAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<VenueXAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<VenueXAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<VenueXAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(VenueXAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                VenueXAppUser item=new VenueXAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<VenueXAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public VenueXAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                VenueXAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueXAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public VenueXAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public VenueXAppUser(Expression<Func<VenueXAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<VenueXAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<VenueXAppUser> _repo;
            
            if(db.TestMode){
                VenueXAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueXAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<VenueXAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static VenueXAppUser SingleOrDefault(Expression<Func<VenueXAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            VenueXAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static VenueXAppUser SingleOrDefault(Expression<Func<VenueXAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            VenueXAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<VenueXAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<VenueXAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<VenueXAppUser> Find(Expression<Func<VenueXAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<VenueXAppUser> Find(Expression<Func<VenueXAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<VenueXAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<VenueXAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<VenueXAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<VenueXAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<VenueXAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<VenueXAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(VenueXAppUser)){
                VenueXAppUser compare=(VenueXAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Venue> Venues
        {
            get
            {
                
                  var repo=DBDataAccess.Venue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        public IQueryable<VenueXAppUserStatus> VenueXAppUserStatuses
        {
            get
            {
                
                  var repo=DBDataAccess.VenueXAppUserStatus.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueXAppUserStatusID == _StatusID
                       select items;
            }
        }

        #endregion
        

        int _VenueID;
        public int VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<VenueXAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SportsTeamXVenue table in the Meetball Database.
    /// </summary>
    public partial class SportsTeamXVenue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SportsTeamXVenue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SportsTeamXVenue>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SportsTeamXVenue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SportsTeamXVenue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SportsTeamXVenue item=new SportsTeamXVenue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SportsTeamXVenue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public SportsTeamXVenue(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SportsTeamXVenue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsTeamXVenue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SportsTeamXVenue(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SportsTeamXVenue(Expression<Func<SportsTeamXVenue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SportsTeamXVenue> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<SportsTeamXVenue> _repo;
            
            if(db.TestMode){
                SportsTeamXVenue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SportsTeamXVenue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SportsTeamXVenue> GetRepo(){
            return GetRepo("","");
        }
        
        public static SportsTeamXVenue SingleOrDefault(Expression<Func<SportsTeamXVenue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SportsTeamXVenue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SportsTeamXVenue SingleOrDefault(Expression<Func<SportsTeamXVenue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SportsTeamXVenue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SportsTeamXVenue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SportsTeamXVenue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SportsTeamXVenue> Find(Expression<Func<SportsTeamXVenue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SportsTeamXVenue> Find(Expression<Func<SportsTeamXVenue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SportsTeamXVenue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SportsTeamXVenue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SportsTeamXVenue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SportsTeamXVenue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SportsTeamXVenue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SportsTeamXVenue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SportsTeamID";
        }

        public object KeyValue()
        {
            return this.SportsTeamID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.VenueID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SportsTeamXVenue)){
                SportsTeamXVenue compare=(SportsTeamXVenue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SportsTeamID;
        }
        
        public string DescriptorValue()
        {
                            return this.VenueID.ToString();
                    }

        public string DescriptorColumn() {
            return "VenueID";
        }
        public static string GetKeyColumn()
        {
            return "SportsTeamID";
        }        
        public static string GetDescriptorColumn()
        {
            return "VenueID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SportsTeam> SportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTeamID == _SportsTeamID
                       select items;
            }
        }

        public IQueryable<Venue> Venues
        {
            get
            {
                
                  var repo=DBDataAccess.Venue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        #endregion
        

        int _SportsTeamID;
        public int SportsTeamID
        {
            get { return _SportsTeamID; }
            set
            {
                if(_SportsTeamID!=value){
                    _SportsTeamID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTeamID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VenueID;
        public int VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SportsTypeID;
        public int? SportsTypeID
        {
            get { return _SportsTypeID; }
            set
            {
                if(_SportsTypeID!=value){
                    _SportsTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SportsTeamXVenue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the WebAssetCategory table in the Meetball Database.
    /// </summary>
    public partial class WebAssetCategory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<WebAssetCategory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<WebAssetCategory>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<WebAssetCategory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(WebAssetCategory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                WebAssetCategory item=new WebAssetCategory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<WebAssetCategory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public WebAssetCategory(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                WebAssetCategory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAssetCategory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public WebAssetCategory(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public WebAssetCategory(Expression<Func<WebAssetCategory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<WebAssetCategory> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<WebAssetCategory> _repo;
            
            if(db.TestMode){
                WebAssetCategory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAssetCategory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<WebAssetCategory> GetRepo(){
            return GetRepo("","");
        }
        
        public static WebAssetCategory SingleOrDefault(Expression<Func<WebAssetCategory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            WebAssetCategory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static WebAssetCategory SingleOrDefault(Expression<Func<WebAssetCategory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            WebAssetCategory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<WebAssetCategory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<WebAssetCategory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<WebAssetCategory> Find(Expression<Func<WebAssetCategory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<WebAssetCategory> Find(Expression<Func<WebAssetCategory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<WebAssetCategory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<WebAssetCategory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<WebAssetCategory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<WebAssetCategory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<WebAssetCategory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<WebAssetCategory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "WebAssetCategoryId";
        }

        public object KeyValue()
        {
            return this.WebAssetCategoryId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WebAssetCategoryName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(WebAssetCategory)){
                WebAssetCategory compare=(WebAssetCategory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.WebAssetCategoryId;
        }
        
        public string DescriptorValue()
        {
                            return this.WebAssetCategoryName.ToString();
                    }

        public string DescriptorColumn() {
            return "WebAssetCategoryName";
        }
        public static string GetKeyColumn()
        {
            return "WebAssetCategoryId";
        }        
        public static string GetDescriptorColumn()
        {
            return "WebAssetCategoryName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<WebAssetSetting> WebAssetSettings
        {
            get
            {
                
                  var repo=DBDataAccess.WebAssetSetting.GetRepo();
                  return from items in repo.GetAll()
                       where items.WebAssetCategoryId == _WebAssetCategoryId
                       select items;
            }
        }

        #endregion
        

        int _WebAssetCategoryId;
        public int WebAssetCategoryId
        {
            get { return _WebAssetCategoryId; }
            set
            {
                if(_WebAssetCategoryId!=value){
                    _WebAssetCategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetCategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WebAssetCategoryName;
        public string WebAssetCategoryName
        {
            get { return _WebAssetCategoryName; }
            set
            {
                if(_WebAssetCategoryName!=value){
                    _WebAssetCategoryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetCategoryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        short _DisplayOrder;
        public short DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<WebAssetCategory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the url_base table in the Meetball Database.
    /// </summary>
    public partial class url_base: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<url_base> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<url_base>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<url_base> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(url_base item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                url_base item=new url_base();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<url_base> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public url_base(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                url_base.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<url_base>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public url_base(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public url_base(Expression<Func<url_base, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<url_base> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<url_base> _repo;
            
            if(db.TestMode){
                url_base.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<url_base>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<url_base> GetRepo(){
            return GetRepo("","");
        }
        
        public static url_base SingleOrDefault(Expression<Func<url_base, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            url_base single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static url_base SingleOrDefault(Expression<Func<url_base, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            url_base single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<url_base, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<url_base, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<url_base> Find(Expression<Func<url_base, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<url_base> Find(Expression<Func<url_base, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<url_base> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<url_base> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<url_base> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<url_base> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<url_base> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<url_base> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "BaseUrlID";
        }

        public object KeyValue()
        {
            return this.BaseUrlID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.url.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(url_base)){
                url_base compare=(url_base)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.BaseUrlID;
        }
        
        public string DescriptorValue()
        {
                            return this.url.ToString();
                    }

        public string DescriptorColumn() {
            return "url";
        }
        public static string GetKeyColumn()
        {
            return "BaseUrlID";
        }        
        public static string GetDescriptorColumn()
        {
            return "url";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _BaseUrlID;
        public int BaseUrlID
        {
            get { return _BaseUrlID; }
            set
            {
                if(_BaseUrlID!=value){
                    _BaseUrlID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BaseUrlID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _url;
        public string url
        {
            get { return _url; }
            set
            {
                if(_url!=value){
                    _url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<url_base, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserXSportsTeam table in the Meetball Database.
    /// </summary>
    public partial class AppUserXSportsTeam: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserXSportsTeam> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserXSportsTeam>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserXSportsTeam> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserXSportsTeam item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserXSportsTeam item=new AppUserXSportsTeam();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserXSportsTeam> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserXSportsTeam(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserXSportsTeam.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXSportsTeam>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserXSportsTeam(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserXSportsTeam(Expression<Func<AppUserXSportsTeam, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserXSportsTeam> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserXSportsTeam> _repo;
            
            if(db.TestMode){
                AppUserXSportsTeam.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXSportsTeam>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserXSportsTeam> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserXSportsTeam SingleOrDefault(Expression<Func<AppUserXSportsTeam, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserXSportsTeam single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserXSportsTeam SingleOrDefault(Expression<Func<AppUserXSportsTeam, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserXSportsTeam single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserXSportsTeam, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserXSportsTeam, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserXSportsTeam> Find(Expression<Func<AppUserXSportsTeam, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserXSportsTeam> Find(Expression<Func<AppUserXSportsTeam, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserXSportsTeam> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserXSportsTeam> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserXSportsTeam> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserXSportsTeam> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserXSportsTeam> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserXSportsTeam> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SportsTeamID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserXSportsTeam)){
                AppUserXSportsTeam compare=(AppUserXSportsTeam)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.SportsTeamID.ToString();
                    }

        public string DescriptorColumn() {
            return "SportsTeamID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SportsTeamID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<SportsTeam> SportsTeams
        {
            get
            {
                
                  var repo=DBDataAccess.SportsTeam.GetRepo();
                  return from items in repo.GetAll()
                       where items.SportsTeamID == _SportsTeamID
                       select items;
            }
        }

        #endregion
        

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SportsTeamID;
        public int SportsTeamID
        {
            get { return _SportsTeamID; }
            set
            {
                if(_SportsTeamID!=value){
                    _SportsTeamID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SportsTeamID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserXSportsTeam, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Meetball table in the Meetball Database.
    /// </summary>
    public partial class Meetball: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Meetball> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Meetball>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Meetball> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Meetball item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Meetball item=new Meetball();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Meetball> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Meetball(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Meetball.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Meetball>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Meetball(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Meetball(Expression<Func<Meetball, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Meetball> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Meetball> _repo;
            
            if(db.TestMode){
                Meetball.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Meetball>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Meetball> GetRepo(){
            return GetRepo("","");
        }
        
        public static Meetball SingleOrDefault(Expression<Func<Meetball, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Meetball single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Meetball SingleOrDefault(Expression<Func<Meetball, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Meetball single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Meetball, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Meetball, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Meetball> Find(Expression<Func<Meetball, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Meetball> Find(Expression<Func<Meetball, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Meetball> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Meetball> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Meetball> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Meetball> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Meetball> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Meetball> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballID";
        }

        public object KeyValue()
        {
            return this.MeetballID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MeetballName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Meetball)){
                Meetball compare=(Meetball)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballID;
        }
        
        public string DescriptorValue()
        {
                            return this.MeetballName.ToString();
                    }

        public string DescriptorColumn() {
            return "MeetballName";
        }
        public static string GetKeyColumn()
        {
            return "MeetballID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MeetballName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Convo> Convos
        {
            get
            {
                
                  var repo=DBDataAccess.Convo.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<GPXType> GPXTypes
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _GeneralLocationGPXTypeID
                       select items;
            }
        }

        public IQueryable<GPXType> GPXTypes2
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _SpecificLocationGPXTypeID
                       select items;
            }
        }

        public IQueryable<MessageMB> MessageMBs
        {
            get
            {
                
                  var repo=DBDataAccess.MessageMB.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<Notification> Notifications
        {
            get
            {
                
                  var repo=DBDataAccess.Notification.GetRepo();
                  return from items in repo.GetAll()
                       where items.NotificationMeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballComment> MeetballComments
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballXHashtag> MeetballXHashtags
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballXHashtag.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballOwner> MeetballOwners
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballOwner.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<AppUserActivityLog> AppUserActivityLogs
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballLog> MeetballLogs
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballTracking> MeetballTrackings
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballTracking.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballResponse> MeetballResponses
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetBallXBroadcast> MeetBallXBroadcasts
        {
            get
            {
                
                  var repo=DBDataAccess.MeetBallXBroadcast.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballAction> MeetballActions
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballAction.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<Sharing> Sharings
        {
            get
            {
                
                  var repo=DBDataAccess.Sharing.GetRepo();
                  return from items in repo.GetAll()
                       where items.SharingID == _SharingID
                       select items;
            }
        }

        public IQueryable<Usage> Usages
        {
            get
            {
                
                  var repo=DBDataAccess.Usage.GetRepo();
                  return from items in repo.GetAll()
                       where items.UsageId == _UsageId
                       select items;
            }
        }

        #endregion
        

        int _MeetballID;
        public int MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MeetballName;
        public string MeetballName
        {
            get { return _MeetballName; }
            set
            {
                if(_MeetballName!=value){
                    _MeetballName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MeetballDescription;
        public string MeetballDescription
        {
            get { return _MeetballDescription; }
            set
            {
                if(_MeetballDescription!=value){
                    _MeetballDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Private;
        public bool? Private
        {
            get { return _Private; }
            set
            {
                if(_Private!=value){
                    _Private=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Private");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SharingID;
        public int? SharingID
        {
            get { return _SharingID; }
            set
            {
                if(_SharingID!=value){
                    _SharingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SharingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartDate;
        public DateTime? StartDate
        {
            get { return _StartDate; }
            set
            {
                if(_StartDate!=value){
                    _StartDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndDate;
        public DateTime? EndDate
        {
            get { return _EndDate; }
            set
            {
                if(_EndDate!=value){
                    _EndDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FacebookEventID;
        public string FacebookEventID
        {
            get { return _FacebookEventID; }
            set
            {
                if(_FacebookEventID!=value){
                    _FacebookEventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FacebookEventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocationName;
        public string LocationName
        {
            get { return _LocationName; }
            set
            {
                if(_LocationName!=value){
                    _LocationName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationAddress1;
        public string GeneralLocationAddress1
        {
            get { return _GeneralLocationAddress1; }
            set
            {
                if(_GeneralLocationAddress1!=value){
                    _GeneralLocationAddress1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationAddress1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationAddress2;
        public string GeneralLocationAddress2
        {
            get { return _GeneralLocationAddress2; }
            set
            {
                if(_GeneralLocationAddress2!=value){
                    _GeneralLocationAddress2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationAddress2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationCity;
        public string GeneralLocationCity
        {
            get { return _GeneralLocationCity; }
            set
            {
                if(_GeneralLocationCity!=value){
                    _GeneralLocationCity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationCity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationState;
        public string GeneralLocationState
        {
            get { return _GeneralLocationState; }
            set
            {
                if(_GeneralLocationState!=value){
                    _GeneralLocationState=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationState");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationZip;
        public string GeneralLocationZip
        {
            get { return _GeneralLocationZip; }
            set
            {
                if(_GeneralLocationZip!=value){
                    _GeneralLocationZip=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationZip");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationPhone;
        public string GeneralLocationPhone
        {
            get { return _GeneralLocationPhone; }
            set
            {
                if(_GeneralLocationPhone!=value){
                    _GeneralLocationPhone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationPhone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationGPXWKT;
        public string GeneralLocationGPXWKT
        {
            get { return _GeneralLocationGPXWKT; }
            set
            {
                if(_GeneralLocationGPXWKT!=value){
                    _GeneralLocationGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _GeneralLocationGPXTypeID;
        public int? GeneralLocationGPXTypeID
        {
            get { return _GeneralLocationGPXTypeID; }
            set
            {
                if(_GeneralLocationGPXTypeID!=value){
                    _GeneralLocationGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SpecificLocationGPXWKT;
        public string SpecificLocationGPXWKT
        {
            get { return _SpecificLocationGPXWKT; }
            set
            {
                if(_SpecificLocationGPXWKT!=value){
                    _SpecificLocationGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificLocationGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SpecificLocationGPXTypeID;
        public int? SpecificLocationGPXTypeID
        {
            get { return _SpecificLocationGPXTypeID; }
            set
            {
                if(_SpecificLocationGPXTypeID!=value){
                    _SpecificLocationGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificLocationGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocationNotes;
        public string LocationNotes
        {
            get { return _LocationNotes; }
            set
            {
                if(_LocationNotes!=value){
                    _LocationNotes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationNotes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _UsageId;
        public int? UsageId
        {
            get { return _UsageId; }
            set
            {
                if(_UsageId!=value){
                    _UsageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _GeneralLocationAccuracy;
        public int? GeneralLocationAccuracy
        {
            get { return _GeneralLocationAccuracy; }
            set
            {
                if(_GeneralLocationAccuracy!=value){
                    _GeneralLocationAccuracy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationAccuracy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SpecificLocationAccuracy;
        public int? SpecificLocationAccuracy
        {
            get { return _SpecificLocationAccuracy; }
            set
            {
                if(_SpecificLocationAccuracy!=value){
                    _SpecificLocationAccuracy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificLocationAccuracy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MBIDHash;
        public string MBIDHash
        {
            get { return _MBIDHash; }
            set
            {
                if(_MBIDHash!=value){
                    _MBIDHash=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBIDHash");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _short_url_ID;
        public int? short_url_ID
        {
            get { return _short_url_ID; }
            set
            {
                if(_short_url_ID!=value){
                    _short_url_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="short_url_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ConvoID;
        public int? ConvoID
        {
            get { return _ConvoID; }
            set
            {
                if(_ConvoID!=value){
                    _ConvoID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Meetcode;
        public string Meetcode
        {
            get { return _Meetcode; }
            set
            {
                if(_Meetcode!=value){
                    _Meetcode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Meetcode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _HasPic;
        public bool? HasPic
        {
            get { return _HasPic; }
            set
            {
                if(_HasPic!=value){
                    _HasPic=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HasPic");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueID;
        public int? VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _ChatDisabled;
        public bool? ChatDisabled
        {
            get { return _ChatDisabled; }
            set
            {
                if(_ChatDisabled!=value){
                    _ChatDisabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChatDisabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsFeatured;
        public bool? IsFeatured
        {
            get { return _IsFeatured; }
            set
            {
                if(_IsFeatured!=value){
                    _IsFeatured=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsFeatured");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ParentMeetballID;
        public int? ParentMeetballID
        {
            get { return _ParentMeetballID; }
            set
            {
                if(_ParentMeetballID!=value){
                    _ParentMeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentMeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Meetball, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserXFriendAppUser table in the Meetball Database.
    /// </summary>
    public partial class AppUserXFriendAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserXFriendAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserXFriendAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserXFriendAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserXFriendAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserXFriendAppUser item=new AppUserXFriendAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserXFriendAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserXFriendAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserXFriendAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXFriendAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserXFriendAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserXFriendAppUser(Expression<Func<AppUserXFriendAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserXFriendAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserXFriendAppUser> _repo;
            
            if(db.TestMode){
                AppUserXFriendAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXFriendAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserXFriendAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserXFriendAppUser SingleOrDefault(Expression<Func<AppUserXFriendAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserXFriendAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserXFriendAppUser SingleOrDefault(Expression<Func<AppUserXFriendAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserXFriendAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserXFriendAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserXFriendAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserXFriendAppUser> Find(Expression<Func<AppUserXFriendAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserXFriendAppUser> Find(Expression<Func<AppUserXFriendAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserXFriendAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserXFriendAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserXFriendAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserXFriendAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserXFriendAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserXFriendAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FriendAppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserXFriendAppUser)){
                AppUserXFriendAppUser compare=(AppUserXFriendAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.FriendAppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "FriendAppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FriendAppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _FriendAppUserID
                       select items;
            }
        }

        public IQueryable<Convo> Convos
        {
            get
            {
                
                  var repo=DBDataAccess.Convo.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<FriendStatus> FriendStatuses
        {
            get
            {
                
                  var repo=DBDataAccess.FriendStatus.GetRepo();
                  return from items in repo.GetAll()
                       where items.FriendStatusID == _FriendStatusID
                       select items;
            }
        }

        public IQueryable<MeetballTracking> MeetballTrackings
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballTracking.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballTrackingID == _MeetballTrackingID
                       select items;
            }
        }

        #endregion
        

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _FriendAppUserID;
        public int FriendAppUserID
        {
            get { return _FriendAppUserID; }
            set
            {
                if(_FriendAppUserID!=value){
                    _FriendAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _FriendStatusID;
        public int? FriendStatusID
        {
            get { return _FriendStatusID; }
            set
            {
                if(_FriendStatusID!=value){
                    _FriendStatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendStatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Favorite;
        public bool? Favorite
        {
            get { return _Favorite; }
            set
            {
                if(_Favorite!=value){
                    _Favorite=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Favorite");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballTrackingID;
        public int? MeetballTrackingID
        {
            get { return _MeetballTrackingID; }
            set
            {
                if(_MeetballTrackingID!=value){
                    _MeetballTrackingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballTrackingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ConvoID;
        public int? ConvoID
        {
            get { return _ConvoID; }
            set
            {
                if(_ConvoID!=value){
                    _ConvoID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MBCount;
        public int? MBCount
        {
            get { return _MBCount; }
            set
            {
                if(_MBCount!=value){
                    _MBCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserXFriendAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the EventXHashtag table in the Meetball Database.
    /// </summary>
    public partial class EventXHashtag: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<EventXHashtag> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<EventXHashtag>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<EventXHashtag> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(EventXHashtag item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                EventXHashtag item=new EventXHashtag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<EventXHashtag> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public EventXHashtag(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                EventXHashtag.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EventXHashtag>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public EventXHashtag(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public EventXHashtag(Expression<Func<EventXHashtag, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<EventXHashtag> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<EventXHashtag> _repo;
            
            if(db.TestMode){
                EventXHashtag.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EventXHashtag>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<EventXHashtag> GetRepo(){
            return GetRepo("","");
        }
        
        public static EventXHashtag SingleOrDefault(Expression<Func<EventXHashtag, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            EventXHashtag single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static EventXHashtag SingleOrDefault(Expression<Func<EventXHashtag, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            EventXHashtag single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<EventXHashtag, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<EventXHashtag, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<EventXHashtag> Find(Expression<Func<EventXHashtag, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<EventXHashtag> Find(Expression<Func<EventXHashtag, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<EventXHashtag> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<EventXHashtag> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EventXHashtag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EventXHashtag> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EventXHashtag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<EventXHashtag> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EventID";
        }

        public object KeyValue()
        {
            return this.EventID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Hashtag.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(EventXHashtag)){
                EventXHashtag compare=(EventXHashtag)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EventID;
        }
        
        public string DescriptorValue()
        {
                            return this.Hashtag.ToString();
                    }

        public string DescriptorColumn() {
            return "Hashtag";
        }
        public static string GetKeyColumn()
        {
            return "EventID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Hashtag";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Event> Events
        {
            get
            {
                
                  var repo=DBDataAccess.Event.GetRepo();
                  return from items in repo.GetAll()
                       where items.EventID == _EventID
                       select items;
            }
        }

        #endregion
        

        int _EventID;
        public int EventID
        {
            get { return _EventID; }
            set
            {
                if(_EventID!=value){
                    _EventID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EventID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Hashtag;
        public string Hashtag
        {
            get { return _Hashtag; }
            set
            {
                if(_Hashtag!=value){
                    _Hashtag=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Hashtag");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<EventXHashtag, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserOffPlatform table in the Meetball Database.
    /// </summary>
    public partial class AppUserOffPlatform: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserOffPlatform> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserOffPlatform>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserOffPlatform> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserOffPlatform item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserOffPlatform item=new AppUserOffPlatform();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserOffPlatform> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserOffPlatform(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserOffPlatform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserOffPlatform>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserOffPlatform(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserOffPlatform(Expression<Func<AppUserOffPlatform, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserOffPlatform> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserOffPlatform> _repo;
            
            if(db.TestMode){
                AppUserOffPlatform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserOffPlatform>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserOffPlatform> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserOffPlatform SingleOrDefault(Expression<Func<AppUserOffPlatform, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserOffPlatform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserOffPlatform SingleOrDefault(Expression<Func<AppUserOffPlatform, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserOffPlatform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserOffPlatform, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserOffPlatform, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserOffPlatform> Find(Expression<Func<AppUserOffPlatform, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserOffPlatform> Find(Expression<Func<AppUserOffPlatform, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserOffPlatform> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserOffPlatform> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserOffPlatform> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserOffPlatform> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserOffPlatform> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserOffPlatform> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserOffPlatformID";
        }

        public object KeyValue()
        {
            return this.AppUserOffPlatformID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DisplayName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserOffPlatform)){
                AppUserOffPlatform compare=(AppUserOffPlatform)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserOffPlatformID;
        }
        
        public string DescriptorValue()
        {
                            return this.DisplayName.ToString();
                    }

        public string DescriptorColumn() {
            return "DisplayName";
        }
        public static string GetKeyColumn()
        {
            return "AppUserOffPlatformID";
        }        
        public static string GetDescriptorColumn()
        {
            return "DisplayName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _OwnerAppUserID
                       select items;
            }
        }

        #endregion
        

        int _AppUserOffPlatformID;
        public int AppUserOffPlatformID
        {
            get { return _AppUserOffPlatformID; }
            set
            {
                if(_AppUserOffPlatformID!=value){
                    _AppUserOffPlatformID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserOffPlatformID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _OwnerAppUserID;
        public int? OwnerAppUserID
        {
            get { return _OwnerAppUserID; }
            set
            {
                if(_OwnerAppUserID!=value){
                    _OwnerAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OwnerAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayName;
        public string DisplayName
        {
            get { return _DisplayName; }
            set
            {
                if(_DisplayName!=value){
                    _DisplayName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ReferralAppUserID;
        public int? ReferralAppUserID
        {
            get { return _ReferralAppUserID; }
            set
            {
                if(_ReferralAppUserID!=value){
                    _ReferralAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferralAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserOffPlatform, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserActivityLog table in the Meetball Database.
    /// </summary>
    public partial class AppUserActivityLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserActivityLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserActivityLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserActivityLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserActivityLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserActivityLog item=new AppUserActivityLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserActivityLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserActivityLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserActivityLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserActivityLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserActivityLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserActivityLog(Expression<Func<AppUserActivityLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserActivityLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserActivityLog> _repo;
            
            if(db.TestMode){
                AppUserActivityLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserActivityLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserActivityLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserActivityLog SingleOrDefault(Expression<Func<AppUserActivityLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserActivityLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserActivityLog SingleOrDefault(Expression<Func<AppUserActivityLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserActivityLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserActivityLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserActivityLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserActivityLog> Find(Expression<Func<AppUserActivityLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserActivityLog> Find(Expression<Func<AppUserActivityLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserActivityLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserActivityLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserActivityLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserActivityLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserActivityLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserActivityLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserActivityLogID";
        }

        public object KeyValue()
        {
            return this.AppUserActivityLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserActivityDescription.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserActivityLog)){
                AppUserActivityLog compare=(AppUserActivityLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserActivityLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserActivityDescription.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserActivityDescription";
        }
        public static string GetKeyColumn()
        {
            return "AppUserActivityLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserActivityDescription";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _RelatedAppUserID
                       select items;
            }
        }

        public IQueryable<AppUserActivity> AppUserActivities
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserActivity.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserActivityID == _AppUserActivityID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _AppUserActivityLogID;
        public int AppUserActivityLogID
        {
            get { return _AppUserActivityLogID; }
            set
            {
                if(_AppUserActivityLogID!=value){
                    _AppUserActivityLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserActivityLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RelatedAppUserID;
        public int? RelatedAppUserID
        {
            get { return _RelatedAppUserID; }
            set
            {
                if(_RelatedAppUserID!=value){
                    _RelatedAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RelatedAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserActivityID;
        public int? AppUserActivityID
        {
            get { return _AppUserActivityID; }
            set
            {
                if(_AppUserActivityID!=value){
                    _AppUserActivityID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserActivityID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AppUserActivityDescription;
        public string AppUserActivityDescription
        {
            get { return _AppUserActivityDescription; }
            set
            {
                if(_AppUserActivityDescription!=value){
                    _AppUserActivityDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserActivityDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LogDate;
        public DateTime? LogDate
        {
            get { return _LogDate; }
            set
            {
                if(_LogDate!=value){
                    _LogDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsRead;
        public bool? IsRead
        {
            get { return _IsRead; }
            set
            {
                if(_IsRead!=value){
                    _IsRead=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRead");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserActivityLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the WebAssetSetting table in the Meetball Database.
    /// </summary>
    public partial class WebAssetSetting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<WebAssetSetting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<WebAssetSetting>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<WebAssetSetting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(WebAssetSetting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                WebAssetSetting item=new WebAssetSetting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<WebAssetSetting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public WebAssetSetting(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                WebAssetSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAssetSetting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public WebAssetSetting(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public WebAssetSetting(Expression<Func<WebAssetSetting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<WebAssetSetting> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<WebAssetSetting> _repo;
            
            if(db.TestMode){
                WebAssetSetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAssetSetting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<WebAssetSetting> GetRepo(){
            return GetRepo("","");
        }
        
        public static WebAssetSetting SingleOrDefault(Expression<Func<WebAssetSetting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            WebAssetSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static WebAssetSetting SingleOrDefault(Expression<Func<WebAssetSetting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            WebAssetSetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<WebAssetSetting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<WebAssetSetting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<WebAssetSetting> Find(Expression<Func<WebAssetSetting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<WebAssetSetting> Find(Expression<Func<WebAssetSetting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<WebAssetSetting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<WebAssetSetting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<WebAssetSetting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<WebAssetSetting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<WebAssetSetting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<WebAssetSetting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "WebAssetSettingId";
        }

        public object KeyValue()
        {
            return this.WebAssetSettingId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(WebAssetSetting)){
                WebAssetSetting compare=(WebAssetSetting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.WebAssetSettingId;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "WebAssetSettingId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<WebAssetCategory> WebAssetCategories
        {
            get
            {
                
                  var repo=DBDataAccess.WebAssetCategory.GetRepo();
                  return from items in repo.GetAll()
                       where items.WebAssetCategoryId == _WebAssetCategoryId
                       select items;
            }
        }

        #endregion
        

        int _WebAssetSettingId;
        public int WebAssetSettingId
        {
            get { return _WebAssetSettingId; }
            set
            {
                if(_WebAssetSettingId!=value){
                    _WebAssetSettingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetSettingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _WebAssetCategoryId;
        public int? WebAssetCategoryId
        {
            get { return _WebAssetCategoryId; }
            set
            {
                if(_WebAssetCategoryId!=value){
                    _WebAssetCategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetCategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Link;
        public string Link
        {
            get { return _Link; }
            set
            {
                if(_Link!=value){
                    _Link=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Link");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _RequiresSession;
        public bool RequiresSession
        {
            get { return _RequiresSession; }
            set
            {
                if(_RequiresSession!=value){
                    _RequiresSession=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequiresSession");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        short _DisplayOrder;
        public short DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StatusId;
        public int StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreateDate;
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _ModifyDate;
        public DateTime ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<WebAssetSetting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballXHashtag table in the Meetball Database.
    /// </summary>
    public partial class MeetballXHashtag: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballXHashtag> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballXHashtag>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballXHashtag> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballXHashtag item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballXHashtag item=new MeetballXHashtag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballXHashtag> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballXHashtag(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballXHashtag.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballXHashtag>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballXHashtag(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballXHashtag(Expression<Func<MeetballXHashtag, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballXHashtag> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballXHashtag> _repo;
            
            if(db.TestMode){
                MeetballXHashtag.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballXHashtag>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballXHashtag> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballXHashtag SingleOrDefault(Expression<Func<MeetballXHashtag, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballXHashtag single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballXHashtag SingleOrDefault(Expression<Func<MeetballXHashtag, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballXHashtag single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballXHashtag, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballXHashtag, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballXHashtag> Find(Expression<Func<MeetballXHashtag, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballXHashtag> Find(Expression<Func<MeetballXHashtag, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballXHashtag> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballXHashtag> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballXHashtag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballXHashtag> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballXHashtag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballXHashtag> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Hashtag";
        }

        public object KeyValue()
        {
            return this.Hashtag;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Hashtag.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballXHashtag)){
                MeetballXHashtag compare=(MeetballXHashtag)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.Hashtag.ToString();
                    }

        public string DescriptorColumn() {
            return "Hashtag";
        }
        public static string GetKeyColumn()
        {
            return "Hashtag";
        }        
        public static string GetDescriptorColumn()
        {
            return "Hashtag";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MeetballID;
        public int MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Hashtag;
        public string Hashtag
        {
            get { return _Hashtag; }
            set
            {
                if(_Hashtag!=value){
                    _Hashtag=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Hashtag");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballXHashtag, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballOwner table in the Meetball Database.
    /// </summary>
    public partial class MeetballOwner: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballOwner> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballOwner>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballOwner> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballOwner item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballOwner item=new MeetballOwner();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballOwner> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballOwner(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballOwner.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballOwner>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballOwner(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballOwner(Expression<Func<MeetballOwner, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballOwner> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballOwner> _repo;
            
            if(db.TestMode){
                MeetballOwner.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballOwner>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballOwner> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballOwner SingleOrDefault(Expression<Func<MeetballOwner, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballOwner single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballOwner SingleOrDefault(Expression<Func<MeetballOwner, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballOwner single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballOwner, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballOwner, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballOwner> Find(Expression<Func<MeetballOwner, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballOwner> Find(Expression<Func<MeetballOwner, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballOwner> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballOwner> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballOwner> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballOwner> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballOwner> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballOwner> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballID";
        }

        public object KeyValue()
        {
            return this.MeetballID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.OwnerAppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballOwner)){
                MeetballOwner compare=(MeetballOwner)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballID;
        }
        
        public string DescriptorValue()
        {
                            return this.OwnerAppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "OwnerAppUserID";
        }
        public static string GetKeyColumn()
        {
            return "MeetballID";
        }        
        public static string GetDescriptorColumn()
        {
            return "OwnerAppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _OwnerAppUserID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MeetballID;
        public int MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OwnerAppUserID;
        public int OwnerAppUserID
        {
            get { return _OwnerAppUserID; }
            set
            {
                if(_OwnerAppUserID!=value){
                    _OwnerAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OwnerAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballOwner, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserXPhone table in the Meetball Database.
    /// </summary>
    public partial class AppUserXPhone: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserXPhone> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserXPhone>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserXPhone> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserXPhone item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserXPhone item=new AppUserXPhone();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserXPhone> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserXPhone(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserXPhone.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXPhone>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserXPhone(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserXPhone(Expression<Func<AppUserXPhone, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserXPhone> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserXPhone> _repo;
            
            if(db.TestMode){
                AppUserXPhone.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXPhone>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserXPhone> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserXPhone SingleOrDefault(Expression<Func<AppUserXPhone, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserXPhone single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserXPhone SingleOrDefault(Expression<Func<AppUserXPhone, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserXPhone single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserXPhone, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserXPhone, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserXPhone> Find(Expression<Func<AppUserXPhone, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserXPhone> Find(Expression<Func<AppUserXPhone, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserXPhone> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserXPhone> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserXPhone> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserXPhone> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserXPhone> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserXPhone> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Phone.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserXPhone)){
                AppUserXPhone compare=(AppUserXPhone)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.Phone.ToString();
                    }

        public string DescriptorColumn() {
            return "Phone";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Phone";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        #endregion
        

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Phone;
        public string Phone
        {
            get { return _Phone; }
            set
            {
                if(_Phone!=value){
                    _Phone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Phone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserXPhone, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballComment table in the Meetball Database.
    /// </summary>
    public partial class MeetballComment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballComment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballComment>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballComment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballComment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballComment item=new MeetballComment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballComment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballComment(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballComment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballComment(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballComment(Expression<Func<MeetballComment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballComment> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballComment> _repo;
            
            if(db.TestMode){
                MeetballComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballComment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballComment> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballComment SingleOrDefault(Expression<Func<MeetballComment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballComment SingleOrDefault(Expression<Func<MeetballComment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballComment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballComment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballComment> Find(Expression<Func<MeetballComment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballComment> Find(Expression<Func<MeetballComment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballComment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballComment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballComment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballComment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballComment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballComment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballCommentID";
        }

        public object KeyValue()
        {
            return this.MeetballCommentID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Comment.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballComment)){
                MeetballComment compare=(MeetballComment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballCommentID;
        }
        
        public string DescriptorValue()
        {
                            return this.Comment.ToString();
                    }

        public string DescriptorColumn() {
            return "Comment";
        }
        public static string GetKeyColumn()
        {
            return "MeetballCommentID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Comment";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _ToAppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MeetballCommentID;
        public int MeetballCommentID
        {
            get { return _MeetballCommentID; }
            set
            {
                if(_MeetballCommentID!=value){
                    _MeetballCommentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballCommentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CommentDate;
        public DateTime? CommentDate
        {
            get { return _CommentDate; }
            set
            {
                if(_CommentDate!=value){
                    _CommentDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CommentDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Approved;
        public bool? Approved
        {
            get { return _Approved; }
            set
            {
                if(_Approved!=value){
                    _Approved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Approved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ToAppUserID;
        public int? ToAppUserID
        {
            get { return _ToAppUserID; }
            set
            {
                if(_ToAppUserID!=value){
                    _ToAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsRead;
        public bool? IsRead
        {
            get { return _IsRead; }
            set
            {
                if(_IsRead!=value){
                    _IsRead=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRead");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballComment, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the EmailTemplate table in the Meetball Database.
    /// </summary>
    public partial class EmailTemplate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<EmailTemplate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<EmailTemplate>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<EmailTemplate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(EmailTemplate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                EmailTemplate item=new EmailTemplate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<EmailTemplate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public EmailTemplate(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                EmailTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailTemplate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public EmailTemplate(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public EmailTemplate(Expression<Func<EmailTemplate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<EmailTemplate> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<EmailTemplate> _repo;
            
            if(db.TestMode){
                EmailTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailTemplate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<EmailTemplate> GetRepo(){
            return GetRepo("","");
        }
        
        public static EmailTemplate SingleOrDefault(Expression<Func<EmailTemplate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            EmailTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static EmailTemplate SingleOrDefault(Expression<Func<EmailTemplate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            EmailTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<EmailTemplate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<EmailTemplate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<EmailTemplate> Find(Expression<Func<EmailTemplate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<EmailTemplate> Find(Expression<Func<EmailTemplate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<EmailTemplate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<EmailTemplate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EmailTemplate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EmailTemplate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EmailTemplate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<EmailTemplate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EmailTemplateID";
        }

        public object KeyValue()
        {
            return this.EmailTemplateID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EmailTemplateName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(EmailTemplate)){
                EmailTemplate compare=(EmailTemplate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EmailTemplateID;
        }
        
        public string DescriptorValue()
        {
                            return this.EmailTemplateName.ToString();
                    }

        public string DescriptorColumn() {
            return "EmailTemplateName";
        }
        public static string GetKeyColumn()
        {
            return "EmailTemplateID";
        }        
        public static string GetDescriptorColumn()
        {
            return "EmailTemplateName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<EmailLog> EmailLogs
        {
            get
            {
                
                  var repo=DBDataAccess.EmailLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.EmailTemplateID == _EmailTemplateID
                       select items;
            }
        }

        #endregion
        

        int _EmailTemplateID;
        public int EmailTemplateID
        {
            get { return _EmailTemplateID; }
            set
            {
                if(_EmailTemplateID!=value){
                    _EmailTemplateID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailTemplateID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailTemplateName;
        public string EmailTemplateName
        {
            get { return _EmailTemplateName; }
            set
            {
                if(_EmailTemplateName!=value){
                    _EmailTemplateName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailTemplateName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailBody;
        public string EmailBody
        {
            get { return _EmailBody; }
            set
            {
                if(_EmailBody!=value){
                    _EmailBody=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailBody");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailSimpleBody;
        public string EmailSimpleBody
        {
            get { return _EmailSimpleBody; }
            set
            {
                if(_EmailSimpleBody!=value){
                    _EmailSimpleBody=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailSimpleBody");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TextBody;
        public string TextBody
        {
            get { return _TextBody; }
            set
            {
                if(_TextBody!=value){
                    _TextBody=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TextBody");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PushBody;
        public string PushBody
        {
            get { return _PushBody; }
            set
            {
                if(_PushBody!=value){
                    _PushBody=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PushBody");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Version;
        public int? Version
        {
            get { return _Version; }
            set
            {
                if(_Version!=value){
                    _Version=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Version");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _TemplateNumber;
        public int? TemplateNumber
        {
            get { return _TemplateNumber; }
            set
            {
                if(_TemplateNumber!=value){
                    _TemplateNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TemplateNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<EmailTemplate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserPush table in the Meetball Database.
    /// </summary>
    public partial class AppUserPush: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserPush> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserPush>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserPush> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserPush item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserPush item=new AppUserPush();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserPush> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserPush(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserPush.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserPush>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserPush(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserPush(Expression<Func<AppUserPush, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserPush> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserPush> _repo;
            
            if(db.TestMode){
                AppUserPush.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserPush>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserPush> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserPush SingleOrDefault(Expression<Func<AppUserPush, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserPush single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserPush SingleOrDefault(Expression<Func<AppUserPush, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserPush single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserPush, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserPush, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserPush> Find(Expression<Func<AppUserPush, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserPush> Find(Expression<Func<AppUserPush, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserPush> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserPush> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserPush> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserPush> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserPush> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserPush> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserPushID";
        }

        public object KeyValue()
        {
            return this.AppUserPushID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PushUsername.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserPush)){
                AppUserPush compare=(AppUserPush)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserPushID;
        }
        
        public string DescriptorValue()
        {
                            return this.PushUsername.ToString();
                    }

        public string DescriptorColumn() {
            return "PushUsername";
        }
        public static string GetKeyColumn()
        {
            return "AppUserPushID";
        }        
        public static string GetDescriptorColumn()
        {
            return "PushUsername";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUserPushSession> AppUserPushSessions
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserPushSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserPushID == _AppUserPushID
                       select items;
            }
        }

        #endregion
        

        int _AppUserPushID;
        public int AppUserPushID
        {
            get { return _AppUserPushID; }
            set
            {
                if(_AppUserPushID!=value){
                    _AppUserPushID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserPushID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PushUsername;
        public string PushUsername
        {
            get { return _PushUsername; }
            set
            {
                if(_PushUsername!=value){
                    _PushUsername=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PushUsername");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PushPassword;
        public string PushPassword
        {
            get { return _PushPassword; }
            set
            {
                if(_PushPassword!=value){
                    _PushPassword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PushPassword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PushUserID;
        public string PushUserID
        {
            get { return _PushUserID; }
            set
            {
                if(_PushUserID!=value){
                    _PushUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PushUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Badge;
        public int? Badge
        {
            get { return _Badge; }
            set
            {
                if(_Badge!=value){
                    _Badge=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Badge");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserPush, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the url_short table in the Meetball Database.
    /// </summary>
    public partial class url_short: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<url_short> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<url_short>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<url_short> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(url_short item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                url_short item=new url_short();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<url_short> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public url_short(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                url_short.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<url_short>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public url_short(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public url_short(Expression<Func<url_short, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<url_short> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<url_short> _repo;
            
            if(db.TestMode){
                url_short.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<url_short>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<url_short> GetRepo(){
            return GetRepo("","");
        }
        
        public static url_short SingleOrDefault(Expression<Func<url_short, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            url_short single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static url_short SingleOrDefault(Expression<Func<url_short, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            url_short single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<url_short, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<url_short, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<url_short> Find(Expression<Func<url_short, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<url_short> Find(Expression<Func<url_short, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<url_short> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<url_short> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<url_short> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<url_short> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<url_short> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<url_short> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "short_url_ID";
        }

        public object KeyValue()
        {
            return this.short_url_ID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.short_url.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(url_short)){
                url_short compare=(url_short)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.short_url_ID;
        }
        
        public string DescriptorValue()
        {
                            return this.short_url.ToString();
                    }

        public string DescriptorColumn() {
            return "short_url";
        }
        public static string GetKeyColumn()
        {
            return "short_url_ID";
        }        
        public static string GetDescriptorColumn()
        {
            return "short_url";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _short_url_ID;
        public int short_url_ID
        {
            get { return _short_url_ID; }
            set
            {
                if(_short_url_ID!=value){
                    _short_url_ID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="short_url_ID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _short_url;
        public string short_url
        {
            get { return _short_url; }
            set
            {
                if(_short_url!=value){
                    _short_url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="short_url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _create_date;
        public DateTime create_date
        {
            get { return _create_date; }
            set
            {
                if(_create_date!=value){
                    _create_date=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="create_date");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _created_by;
        public string created_by
        {
            get { return _created_by; }
            set
            {
                if(_created_by!=value){
                    _created_by=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="created_by");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _real_url;
        public string real_url
        {
            get { return _real_url; }
            set
            {
                if(_real_url!=value){
                    _real_url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="real_url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<url_short, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserPushSession table in the Meetball Database.
    /// </summary>
    public partial class AppUserPushSession: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserPushSession> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserPushSession>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserPushSession> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserPushSession item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserPushSession item=new AppUserPushSession();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserPushSession> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserPushSession(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserPushSession.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserPushSession>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserPushSession(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserPushSession(Expression<Func<AppUserPushSession, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserPushSession> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserPushSession> _repo;
            
            if(db.TestMode){
                AppUserPushSession.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserPushSession>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserPushSession> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserPushSession SingleOrDefault(Expression<Func<AppUserPushSession, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserPushSession single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserPushSession SingleOrDefault(Expression<Func<AppUserPushSession, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserPushSession single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserPushSession, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserPushSession, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserPushSession> Find(Expression<Func<AppUserPushSession, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserPushSession> Find(Expression<Func<AppUserPushSession, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserPushSession> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserPushSession> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserPushSession> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserPushSession> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserPushSession> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserPushSession> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserPushSessionID";
        }

        public object KeyValue()
        {
            return this.AppUserPushSessionID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SessionID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserPushSession)){
                AppUserPushSession compare=(AppUserPushSession)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserPushSessionID;
        }
        
        public string DescriptorValue()
        {
                            return this.SessionID.ToString();
                    }

        public string DescriptorColumn() {
            return "SessionID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserPushSessionID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SessionID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUserPush> AppUserPushes
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserPush.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserPushID == _AppUserPushID
                       select items;
            }
        }

        #endregion
        

        int _AppUserPushSessionID;
        public int AppUserPushSessionID
        {
            get { return _AppUserPushSessionID; }
            set
            {
                if(_AppUserPushSessionID!=value){
                    _AppUserPushSessionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserPushSessionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserPushID;
        public int? AppUserPushID
        {
            get { return _AppUserPushID; }
            set
            {
                if(_AppUserPushID!=value){
                    _AppUserPushID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserPushID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SessionID;
        public string SessionID
        {
            get { return _SessionID; }
            set
            {
                if(_SessionID!=value){
                    _SessionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SessionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _SessionStart;
        public DateTime? SessionStart
        {
            get { return _SessionStart; }
            set
            {
                if(_SessionStart!=value){
                    _SessionStart=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SessionStart");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserPushSession, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the EmailLog table in the Meetball Database.
    /// </summary>
    public partial class EmailLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<EmailLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<EmailLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<EmailLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(EmailLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                EmailLog item=new EmailLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<EmailLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public EmailLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                EmailLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public EmailLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public EmailLog(Expression<Func<EmailLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<EmailLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<EmailLog> _repo;
            
            if(db.TestMode){
                EmailLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<EmailLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static EmailLog SingleOrDefault(Expression<Func<EmailLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            EmailLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static EmailLog SingleOrDefault(Expression<Func<EmailLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            EmailLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<EmailLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<EmailLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<EmailLog> Find(Expression<Func<EmailLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<EmailLog> Find(Expression<Func<EmailLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<EmailLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<EmailLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EmailLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EmailLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EmailLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<EmailLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EmailLogID";
        }

        public object KeyValue()
        {
            return this.EmailLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ToEmail.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(EmailLog)){
                EmailLog compare=(EmailLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EmailLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.ToEmail.ToString();
                    }

        public string DescriptorColumn() {
            return "ToEmail";
        }
        public static string GetKeyColumn()
        {
            return "EmailLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ToEmail";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _ToAppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _FromAppUserID
                       select items;
            }
        }

        public IQueryable<EmailTemplate> EmailTemplates
        {
            get
            {
                
                  var repo=DBDataAccess.EmailTemplate.GetRepo();
                  return from items in repo.GetAll()
                       where items.EmailTemplateID == _EmailTemplateID
                       select items;
            }
        }

        public IQueryable<MessageType> MessageTypes
        {
            get
            {
                
                  var repo=DBDataAccess.MessageType.GetRepo();
                  return from items in repo.GetAll()
                       where items.MessageTypeID == _MessageTypeID
                       select items;
            }
        }

        #endregion
        

        int _EmailLogID;
        public int EmailLogID
        {
            get { return _EmailLogID; }
            set
            {
                if(_EmailLogID!=value){
                    _EmailLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _EmailTemplateID;
        public int? EmailTemplateID
        {
            get { return _EmailTemplateID; }
            set
            {
                if(_EmailTemplateID!=value){
                    _EmailTemplateID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailTemplateID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToEmail;
        public string ToEmail
        {
            get { return _ToEmail; }
            set
            {
                if(_ToEmail!=value){
                    _ToEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ToAppUserID;
        public int? ToAppUserID
        {
            get { return _ToAppUserID; }
            set
            {
                if(_ToAppUserID!=value){
                    _ToAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromEmail;
        public string FromEmail
        {
            get { return _FromEmail; }
            set
            {
                if(_FromEmail!=value){
                    _FromEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _FromAppUserID;
        public int? FromAppUserID
        {
            get { return _FromAppUserID; }
            set
            {
                if(_FromAppUserID!=value){
                    _FromAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailMessage;
        public string EmailMessage
        {
            get { return _EmailMessage; }
            set
            {
                if(_EmailMessage!=value){
                    _EmailMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MessageTypeID;
        public int? MessageTypeID
        {
            get { return _MessageTypeID; }
            set
            {
                if(_MessageTypeID!=value){
                    _MessageTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MessageTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _SentDate;
        public DateTime? SentDate
        {
            get { return _SentDate; }
            set
            {
                if(_SentDate!=value){
                    _SentDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SentDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Successful;
        public bool? Successful
        {
            get { return _Successful; }
            set
            {
                if(_Successful!=value){
                    _Successful=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Successful");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _QueueDate;
        public DateTime? QueueDate
        {
            get { return _QueueDate; }
            set
            {
                if(_QueueDate!=value){
                    _QueueDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QueueDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FailureReason;
        public string FailureReason
        {
            get { return _FailureReason; }
            set
            {
                if(_FailureReason!=value){
                    _FailureReason=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FailureReason");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<EmailLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballResponseLog table in the Meetball Database.
    /// </summary>
    public partial class MeetballResponseLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballResponseLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballResponseLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballResponseLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballResponseLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballResponseLog item=new MeetballResponseLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballResponseLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballResponseLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballResponseLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballResponseLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballResponseLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballResponseLog(Expression<Func<MeetballResponseLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballResponseLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballResponseLog> _repo;
            
            if(db.TestMode){
                MeetballResponseLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballResponseLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballResponseLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballResponseLog SingleOrDefault(Expression<Func<MeetballResponseLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballResponseLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballResponseLog SingleOrDefault(Expression<Func<MeetballResponseLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballResponseLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballResponseLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballResponseLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballResponseLog> Find(Expression<Func<MeetballResponseLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballResponseLog> Find(Expression<Func<MeetballResponseLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballResponseLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballResponseLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballResponseLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballResponseLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballResponseLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballResponseLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballResponseLogID";
        }

        public object KeyValue()
        {
            return this.MeetballResponseLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MeetballResponseID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballResponseLog)){
                MeetballResponseLog compare=(MeetballResponseLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballResponseLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.MeetballResponseID.ToString();
                    }

        public string DescriptorColumn() {
            return "MeetballResponseID";
        }
        public static string GetKeyColumn()
        {
            return "MeetballResponseLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MeetballResponseID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<MeetballResponse> MeetballResponses
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballResponseID == _MeetballResponseID
                       select items;
            }
        }

        public IQueryable<Response> Responses
        {
            get
            {
                
                  var repo=DBDataAccess.Response.GetRepo();
                  return from items in repo.GetAll()
                       where items.ResponseID == _ResponseID
                       select items;
            }
        }

        #endregion
        

        int _MeetballResponseLogID;
        public int MeetballResponseLogID
        {
            get { return _MeetballResponseLogID; }
            set
            {
                if(_MeetballResponseLogID!=value){
                    _MeetballResponseLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballResponseLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballResponseID;
        public int? MeetballResponseID
        {
            get { return _MeetballResponseID; }
            set
            {
                if(_MeetballResponseID!=value){
                    _MeetballResponseID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballResponseID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ResponseID;
        public int? ResponseID
        {
            get { return _ResponseID; }
            set
            {
                if(_ResponseID!=value){
                    _ResponseID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResponseID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ResponseDate;
        public DateTime? ResponseDate
        {
            get { return _ResponseDate; }
            set
            {
                if(_ResponseDate!=value){
                    _ResponseDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResponseDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballResponseLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MessageType table in the Meetball Database.
    /// </summary>
    public partial class MessageType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MessageType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MessageType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MessageType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MessageType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MessageType item=new MessageType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MessageType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MessageType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MessageType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MessageType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MessageType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MessageType(Expression<Func<MessageType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MessageType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MessageType> _repo;
            
            if(db.TestMode){
                MessageType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MessageType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MessageType> GetRepo(){
            return GetRepo("","");
        }
        
        public static MessageType SingleOrDefault(Expression<Func<MessageType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MessageType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MessageType SingleOrDefault(Expression<Func<MessageType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MessageType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MessageType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MessageType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MessageType> Find(Expression<Func<MessageType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MessageType> Find(Expression<Func<MessageType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MessageType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MessageType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MessageType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MessageType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MessageType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MessageType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MessageTypeID";
        }

        public object KeyValue()
        {
            return this.MessageTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MessageTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MessageType)){
                MessageType compare=(MessageType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MessageTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.MessageTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "MessageTypeName";
        }
        public static string GetKeyColumn()
        {
            return "MessageTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MessageTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<EmailLog> EmailLogs
        {
            get
            {
                
                  var repo=DBDataAccess.EmailLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.MessageTypeID == _MessageTypeID
                       select items;
            }
        }

        #endregion
        

        int _MessageTypeID;
        public int MessageTypeID
        {
            get { return _MessageTypeID; }
            set
            {
                if(_MessageTypeID!=value){
                    _MessageTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MessageTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MessageTypeName;
        public string MessageTypeName
        {
            get { return _MessageTypeName; }
            set
            {
                if(_MessageTypeName!=value){
                    _MessageTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MessageTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MessageType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Platform table in the Meetball Database.
    /// </summary>
    public partial class Platform: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Platform> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Platform>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Platform> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Platform item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Platform item=new Platform();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Platform> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Platform(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Platform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Platform>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Platform(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Platform(Expression<Func<Platform, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Platform> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Platform> _repo;
            
            if(db.TestMode){
                Platform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Platform>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Platform> GetRepo(){
            return GetRepo("","");
        }
        
        public static Platform SingleOrDefault(Expression<Func<Platform, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Platform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Platform SingleOrDefault(Expression<Func<Platform, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Platform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Platform, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Platform, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Platform> Find(Expression<Func<Platform, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Platform> Find(Expression<Func<Platform, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Platform> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Platform> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Platform> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Platform> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Platform> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Platform> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "PlatformID";
        }

        public object KeyValue()
        {
            return this.PlatformID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PlatformName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Platform)){
                Platform compare=(Platform)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.PlatformID;
        }
        
        public string DescriptorValue()
        {
                            return this.PlatformName.ToString();
                    }

        public string DescriptorColumn() {
            return "PlatformName";
        }
        public static string GetKeyColumn()
        {
            return "PlatformID";
        }        
        public static string GetDescriptorColumn()
        {
            return "PlatformName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<WebAsset> WebAssets
        {
            get
            {
                
                  var repo=DBDataAccess.WebAsset.GetRepo();
                  return from items in repo.GetAll()
                       where items.PlatformID == _PlatformID
                       select items;
            }
        }

        #endregion
        

        int _PlatformID;
        public int PlatformID
        {
            get { return _PlatformID; }
            set
            {
                if(_PlatformID!=value){
                    _PlatformID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatformID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PlatformName;
        public string PlatformName
        {
            get { return _PlatformName; }
            set
            {
                if(_PlatformName!=value){
                    _PlatformName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatformName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Notes;
        public string Notes
        {
            get { return _Notes; }
            set
            {
                if(_Notes!=value){
                    _Notes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Notes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Platform, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserLog table in the Meetball Database.
    /// </summary>
    public partial class AppUserLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserLog item=new AppUserLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserLog(Expression<Func<AppUserLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserLog> _repo;
            
            if(db.TestMode){
                AppUserLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserLog SingleOrDefault(Expression<Func<AppUserLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserLog SingleOrDefault(Expression<Func<AppUserLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserLog> Find(Expression<Func<AppUserLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserLog> Find(Expression<Func<AppUserLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserLogID";
        }

        public object KeyValue()
        {
            return this.AppUserLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserLog)){
                AppUserLog compare=(AppUserLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        #endregion
        

        int _AppUserLogID;
        public int AppUserLogID
        {
            get { return _AppUserLogID; }
            set
            {
                if(_AppUserLogID!=value){
                    _AppUserLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ActivatedLogDate;
        public DateTime? ActivatedLogDate
        {
            get { return _ActivatedLogDate; }
            set
            {
                if(_ActivatedLogDate!=value){
                    _ActivatedLogDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivatedLogDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the WebAsset table in the Meetball Database.
    /// </summary>
    public partial class WebAsset: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<WebAsset> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<WebAsset>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<WebAsset> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(WebAsset item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                WebAsset item=new WebAsset();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<WebAsset> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public WebAsset(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                WebAsset.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAsset>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public WebAsset(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public WebAsset(Expression<Func<WebAsset, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<WebAsset> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<WebAsset> _repo;
            
            if(db.TestMode){
                WebAsset.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<WebAsset>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<WebAsset> GetRepo(){
            return GetRepo("","");
        }
        
        public static WebAsset SingleOrDefault(Expression<Func<WebAsset, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            WebAsset single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static WebAsset SingleOrDefault(Expression<Func<WebAsset, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            WebAsset single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<WebAsset, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<WebAsset, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<WebAsset> Find(Expression<Func<WebAsset, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<WebAsset> Find(Expression<Func<WebAsset, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<WebAsset> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<WebAsset> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<WebAsset> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<WebAsset> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<WebAsset> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<WebAsset> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "WebAssetId";
        }

        public object KeyValue()
        {
            return this.WebAssetId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(WebAsset)){
                WebAsset compare=(WebAsset)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.WebAssetId;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "WebAssetId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Platform> Platforms
        {
            get
            {
                
                  var repo=DBDataAccess.Platform.GetRepo();
                  return from items in repo.GetAll()
                       where items.PlatformID == _PlatformID
                       select items;
            }
        }

        public IQueryable<WebAssetCollection> WebAssetCollections
        {
            get
            {
                
                  var repo=DBDataAccess.WebAssetCollection.GetRepo();
                  return from items in repo.GetAll()
                       where items.WebAssetCollectionId == _WebAssetCollectionId
                       select items;
            }
        }

        #endregion
        

        int _WebAssetId;
        public int WebAssetId
        {
            get { return _WebAssetId; }
            set
            {
                if(_WebAssetId!=value){
                    _WebAssetId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Url;
        public string Url
        {
            get { return _Url; }
            set
            {
                if(_Url!=value){
                    _Url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _WebAssetCollectionId;
        public int? WebAssetCollectionId
        {
            get { return _WebAssetCollectionId; }
            set
            {
                if(_WebAssetCollectionId!=value){
                    _WebAssetCollectionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WebAssetCollectionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SortOrder;
        public int? SortOrder
        {
            get { return _SortOrder; }
            set
            {
                if(_SortOrder!=value){
                    _SortOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SortOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PlatformID;
        public int? PlatformID
        {
            get { return _PlatformID; }
            set
            {
                if(_PlatformID!=value){
                    _PlatformID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatformID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Version;
        public int? Version
        {
            get { return _Version; }
            set
            {
                if(_Version!=value){
                    _Version=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Version");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<WebAsset, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the LoginType table in the Meetball Database.
    /// </summary>
    public partial class LoginType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<LoginType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<LoginType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<LoginType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(LoginType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                LoginType item=new LoginType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<LoginType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public LoginType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                LoginType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LoginType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public LoginType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public LoginType(Expression<Func<LoginType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<LoginType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<LoginType> _repo;
            
            if(db.TestMode){
                LoginType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LoginType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<LoginType> GetRepo(){
            return GetRepo("","");
        }
        
        public static LoginType SingleOrDefault(Expression<Func<LoginType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            LoginType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static LoginType SingleOrDefault(Expression<Func<LoginType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            LoginType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<LoginType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<LoginType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<LoginType> Find(Expression<Func<LoginType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<LoginType> Find(Expression<Func<LoginType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<LoginType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<LoginType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<LoginType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<LoginType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<LoginType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<LoginType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "LoginTypeID";
        }

        public object KeyValue()
        {
            return this.LoginTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.LoginTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(LoginType)){
                LoginType compare=(LoginType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.LoginTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.LoginTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "LoginTypeName";
        }
        public static string GetKeyColumn()
        {
            return "LoginTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "LoginTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppSession> AppSessions
        {
            get
            {
                
                  var repo=DBDataAccess.AppSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginTypeID == _LoginTypeID
                       select items;
            }
        }

        #endregion
        

        int _LoginTypeID;
        public int LoginTypeID
        {
            get { return _LoginTypeID; }
            set
            {
                if(_LoginTypeID!=value){
                    _LoginTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LoginTypeName;
        public string LoginTypeName
        {
            get { return _LoginTypeName; }
            set
            {
                if(_LoginTypeName!=value){
                    _LoginTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<LoginType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballLog table in the Meetball Database.
    /// </summary>
    public partial class MeetballLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballLog item=new MeetballLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballLog(Expression<Func<MeetballLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballLog> _repo;
            
            if(db.TestMode){
                MeetballLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballLog SingleOrDefault(Expression<Func<MeetballLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballLog SingleOrDefault(Expression<Func<MeetballLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballLog> Find(Expression<Func<MeetballLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballLog> Find(Expression<Func<MeetballLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballLogID";
        }

        public object KeyValue()
        {
            return this.MeetballLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.GeneralLocationGPXWKT.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballLog)){
                MeetballLog compare=(MeetballLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.GeneralLocationGPXWKT.ToString();
                    }

        public string DescriptorColumn() {
            return "GeneralLocationGPXWKT";
        }
        public static string GetKeyColumn()
        {
            return "MeetballLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "GeneralLocationGPXWKT";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GPXType> GPXTypes
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _SpecificLocationGPXTypeID
                       select items;
            }
        }

        public IQueryable<GPXType> GPXTypes1
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _GeneralLocationGPXTypeID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MeetballLogID;
        public int MeetballLogID
        {
            get { return _MeetballLogID; }
            set
            {
                if(_MeetballLogID!=value){
                    _MeetballLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GeneralLocationGPXWKT;
        public string GeneralLocationGPXWKT
        {
            get { return _GeneralLocationGPXWKT; }
            set
            {
                if(_GeneralLocationGPXWKT!=value){
                    _GeneralLocationGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _GeneralLocationGPXTypeID;
        public int? GeneralLocationGPXTypeID
        {
            get { return _GeneralLocationGPXTypeID; }
            set
            {
                if(_GeneralLocationGPXTypeID!=value){
                    _GeneralLocationGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _GeneralLocationLogDate;
        public DateTime? GeneralLocationLogDate
        {
            get { return _GeneralLocationLogDate; }
            set
            {
                if(_GeneralLocationLogDate!=value){
                    _GeneralLocationLogDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GeneralLocationLogDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SpecificLocationGPXWKT;
        public string SpecificLocationGPXWKT
        {
            get { return _SpecificLocationGPXWKT; }
            set
            {
                if(_SpecificLocationGPXWKT!=value){
                    _SpecificLocationGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificLocationGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SpecificLocationGPXTypeID;
        public int? SpecificLocationGPXTypeID
        {
            get { return _SpecificLocationGPXTypeID; }
            set
            {
                if(_SpecificLocationGPXTypeID!=value){
                    _SpecificLocationGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificLocationGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _SpecificLocationLogDate;
        public DateTime? SpecificLocationLogDate
        {
            get { return _SpecificLocationLogDate; }
            set
            {
                if(_SpecificLocationLogDate!=value){
                    _SpecificLocationLogDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificLocationLogDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballTracking table in the Meetball Database.
    /// </summary>
    public partial class MeetballTracking: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballTracking> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballTracking>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballTracking> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballTracking item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballTracking item=new MeetballTracking();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballTracking> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballTracking(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballTracking.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballTracking>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballTracking(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballTracking(Expression<Func<MeetballTracking, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballTracking> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballTracking> _repo;
            
            if(db.TestMode){
                MeetballTracking.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballTracking>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballTracking> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballTracking SingleOrDefault(Expression<Func<MeetballTracking, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballTracking single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballTracking SingleOrDefault(Expression<Func<MeetballTracking, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballTracking single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballTracking, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballTracking, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballTracking> Find(Expression<Func<MeetballTracking, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballTracking> Find(Expression<Func<MeetballTracking, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballTracking> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballTracking> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballTracking> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballTracking> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballTracking> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballTracking> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballTrackingID";
        }

        public object KeyValue()
        {
            return this.MeetballTrackingID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.TrackingGPXWKT.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballTracking)){
                MeetballTracking compare=(MeetballTracking)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballTrackingID;
        }
        
        public string DescriptorValue()
        {
                            return this.TrackingGPXWKT.ToString();
                    }

        public string DescriptorColumn() {
            return "TrackingGPXWKT";
        }
        public static string GetKeyColumn()
        {
            return "MeetballTrackingID";
        }        
        public static string GetDescriptorColumn()
        {
            return "TrackingGPXWKT";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<GPXType> GPXTypes
        {
            get
            {
                
                  var repo=DBDataAccess.GPXType.GetRepo();
                  return from items in repo.GetAll()
                       where items.GPXTypeID == _TrackingGPXTypeID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<AppUserXFriendAppUser> AppUserXFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballTrackingID == _MeetballTrackingID
                       select items;
            }
        }

        public IQueryable<MeetballTrackingSession> MeetballTrackingSessions
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballTrackingSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballTrackingSessionId == _MeetballTrackingSessionId
                       select items;
            }
        }

        #endregion
        

        int _MeetballTrackingID;
        public int MeetballTrackingID
        {
            get { return _MeetballTrackingID; }
            set
            {
                if(_MeetballTrackingID!=value){
                    _MeetballTrackingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballTrackingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _TrackingDate;
        public DateTime? TrackingDate
        {
            get { return _TrackingDate; }
            set
            {
                if(_TrackingDate!=value){
                    _TrackingDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TrackingDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TrackingGPXWKT;
        public string TrackingGPXWKT
        {
            get { return _TrackingGPXWKT; }
            set
            {
                if(_TrackingGPXWKT!=value){
                    _TrackingGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TrackingGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _TrackingGPXTypeID;
        public int? TrackingGPXTypeID
        {
            get { return _TrackingGPXTypeID; }
            set
            {
                if(_TrackingGPXTypeID!=value){
                    _TrackingGPXTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TrackingGPXTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid? _MeetballTrackingSessionId;
        public Guid? MeetballTrackingSessionId
        {
            get { return _MeetballTrackingSessionId; }
            set
            {
                if(_MeetballTrackingSessionId!=value){
                    _MeetballTrackingSessionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballTrackingSessionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _Accuracy;
        public int? Accuracy
        {
            get { return _Accuracy; }
            set
            {
                if(_Accuracy!=value){
                    _Accuracy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Accuracy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _GPSTracking;
        public bool? GPSTracking
        {
            get { return _GPSTracking; }
            set
            {
                if(_GPSTracking!=value){
                    _GPSTracking=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GPSTracking");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Complete;
        public bool? Complete
        {
            get { return _Complete; }
            set
            {
                if(_Complete!=value){
                    _Complete=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Complete");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballTracking, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballResponse table in the Meetball Database.
    /// </summary>
    public partial class MeetballResponse: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballResponse> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballResponse>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballResponse> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballResponse item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballResponse item=new MeetballResponse();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballResponse> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballResponse(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballResponse.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballResponse>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballResponse(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballResponse(Expression<Func<MeetballResponse, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballResponse> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballResponse> _repo;
            
            if(db.TestMode){
                MeetballResponse.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballResponse>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballResponse> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballResponse SingleOrDefault(Expression<Func<MeetballResponse, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballResponse single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballResponse SingleOrDefault(Expression<Func<MeetballResponse, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballResponse single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballResponse, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballResponse, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballResponse> Find(Expression<Func<MeetballResponse, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballResponse> Find(Expression<Func<MeetballResponse, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballResponse> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballResponse> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballResponse> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballResponse> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballResponse> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballResponse> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballResponseID";
        }

        public object KeyValue()
        {
            return this.MeetballResponseID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MeetballID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballResponse)){
                MeetballResponse compare=(MeetballResponse)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballResponseID;
        }
        
        public string DescriptorValue()
        {
                            return this.MeetballID.ToString();
                    }

        public string DescriptorColumn() {
            return "MeetballID";
        }
        public static string GetKeyColumn()
        {
            return "MeetballResponseID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MeetballID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _InvitedByAppUserID
                       select items;
            }
        }

        public IQueryable<Broadcast> Broadcasts
        {
            get
            {
                
                  var repo=DBDataAccess.Broadcast.GetRepo();
                  return from items in repo.GetAll()
                       where items.BroadcastID == _BroadcastID
                       select items;
            }
        }

        public IQueryable<LocationSharing> LocationSharings
        {
            get
            {
                
                  var repo=DBDataAccess.LocationSharing.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationSharingID == _LocationSharingID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        public IQueryable<MeetballResponseLog> MeetballResponseLogs
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponseLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballResponseID == _MeetballResponseID
                       select items;
            }
        }

        public IQueryable<Response> Responses
        {
            get
            {
                
                  var repo=DBDataAccess.Response.GetRepo();
                  return from items in repo.GetAll()
                       where items.ResponseID == _ResponseID
                       select items;
            }
        }

        #endregion
        

        int _MeetballResponseID;
        public int MeetballResponseID
        {
            get { return _MeetballResponseID; }
            set
            {
                if(_MeetballResponseID!=value){
                    _MeetballResponseID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballResponseID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MeetballID;
        public int MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _InvitedByAppUserID;
        public int? InvitedByAppUserID
        {
            get { return _InvitedByAppUserID; }
            set
            {
                if(_InvitedByAppUserID!=value){
                    _InvitedByAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InvitedByAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _SentDate;
        public DateTime? SentDate
        {
            get { return _SentDate; }
            set
            {
                if(_SentDate!=value){
                    _SentDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SentDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ResponseID;
        public int? ResponseID
        {
            get { return _ResponseID; }
            set
            {
                if(_ResponseID!=value){
                    _ResponseID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResponseID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ResponseDate;
        public DateTime? ResponseDate
        {
            get { return _ResponseDate; }
            set
            {
                if(_ResponseDate!=value){
                    _ResponseDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResponseDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LocationSharingID;
        public int? LocationSharingID
        {
            get { return _LocationSharingID; }
            set
            {
                if(_LocationSharingID!=value){
                    _LocationSharingID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationSharingID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ExpirationDate;
        public DateTime? ExpirationDate
        {
            get { return _ExpirationDate; }
            set
            {
                if(_ExpirationDate!=value){
                    _ExpirationDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExpirationDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BroadcastID;
        public int? BroadcastID
        {
            get { return _BroadcastID; }
            set
            {
                if(_BroadcastID!=value){
                    _BroadcastID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BroadcastID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _NewUpdates;
        public int? NewUpdates
        {
            get { return _NewUpdates; }
            set
            {
                if(_NewUpdates!=value){
                    _NewUpdates=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NewUpdates");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ToRead;
        public int? ToRead
        {
            get { return _ToRead; }
            set
            {
                if(_ToRead!=value){
                    _ToRead=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToRead");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballResponse, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ncaa_import table in the Meetball Database.
    /// </summary>
    public partial class ncaa_import: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ncaa_import> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ncaa_import>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ncaa_import> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ncaa_import item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ncaa_import item=new ncaa_import();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ncaa_import> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public ncaa_import(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ncaa_import.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ncaa_import>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ncaa_import(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ncaa_import(Expression<Func<ncaa_import, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ncaa_import> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<ncaa_import> _repo;
            
            if(db.TestMode){
                ncaa_import.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ncaa_import>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ncaa_import> GetRepo(){
            return GetRepo("","");
        }
        
        public static ncaa_import SingleOrDefault(Expression<Func<ncaa_import, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ncaa_import single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ncaa_import SingleOrDefault(Expression<Func<ncaa_import, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ncaa_import single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ncaa_import, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ncaa_import, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ncaa_import> Find(Expression<Func<ncaa_import, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ncaa_import> Find(Expression<Func<ncaa_import, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ncaa_import> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ncaa_import> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ncaa_import> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ncaa_import> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ncaa_import> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ncaa_import> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Team";
        }

        public object KeyValue()
        {
            return this.Team;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Team.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ncaa_import)){
                ncaa_import compare=(ncaa_import)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.Team.ToString();
                    }

        public string DescriptorColumn() {
            return "Team";
        }
        public static string GetKeyColumn()
        {
            return "Team";
        }        
        public static string GetDescriptorColumn()
        {
            return "Team";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        string _Team;
        public string Team
        {
            get { return _Team; }
            set
            {
                if(_Team!=value){
                    _Team=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Team");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ConferenceID;
        public string ConferenceID
        {
            get { return _ConferenceID; }
            set
            {
                if(_ConferenceID!=value){
                    _ConferenceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConferenceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Mascot;
        public string Mascot
        {
            get { return _Mascot; }
            set
            {
                if(_Mascot!=value){
                    _Mascot=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Mascot");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Column3;
        public string Column3
        {
            get { return _Column3; }
            set
            {
                if(_Column3!=value){
                    _Column3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Column 3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Column4;
        public string Column4
        {
            get { return _Column4; }
            set
            {
                if(_Column4!=value){
                    _Column4=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Column 4");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Column5;
        public string Column5
        {
            get { return _Column5; }
            set
            {
                if(_Column5!=value){
                    _Column5=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Column 5");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Column6;
        public string Column6
        {
            get { return _Column6; }
            set
            {
                if(_Column6!=value){
                    _Column6=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Column 6");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Column7;
        public string Column7
        {
            get { return _Column7; }
            set
            {
                if(_Column7!=value){
                    _Column7=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Column 7");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ncaa_import, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the FBAppUser table in the Meetball Database.
    /// </summary>
    public partial class FBAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<FBAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<FBAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<FBAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(FBAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                FBAppUser item=new FBAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<FBAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public FBAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                FBAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FBAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public FBAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public FBAppUser(Expression<Func<FBAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<FBAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<FBAppUser> _repo;
            
            if(db.TestMode){
                FBAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<FBAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<FBAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static FBAppUser SingleOrDefault(Expression<Func<FBAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            FBAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static FBAppUser SingleOrDefault(Expression<Func<FBAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            FBAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<FBAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<FBAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<FBAppUser> Find(Expression<Func<FBAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<FBAppUser> Find(Expression<Func<FBAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<FBAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<FBAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<FBAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<FBAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<FBAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<FBAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "FBAppUserID";
        }

        public object KeyValue()
        {
            return this.FBAppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FirstName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(FBAppUser)){
                FBAppUser compare=(FBAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.FBAppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.FirstName.ToString();
                    }

        public string DescriptorColumn() {
            return "FirstName";
        }
        public static string GetKeyColumn()
        {
            return "FBAppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "FirstName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        #endregion
        

        int _FBAppUserID;
        public int FBAppUserID
        {
            get { return _FBAppUserID; }
            set
            {
                if(_FBAppUserID!=value){
                    _FBAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FBAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FirstName;
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if(_FirstName!=value){
                    _FirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastName;
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if(_LastName!=value){
                    _LastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MiddleName;
        public string MiddleName
        {
            get { return _MiddleName; }
            set
            {
                if(_MiddleName!=value){
                    _MiddleName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MiddleName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Gender;
        public string Gender
        {
            get { return _Gender; }
            set
            {
                if(_Gender!=value){
                    _Gender=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Gender");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Locale;
        public string Locale
        {
            get { return _Locale; }
            set
            {
                if(_Locale!=value){
                    _Locale=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Locale");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserName;
        public string UserName
        {
            get { return _UserName; }
            set
            {
                if(_UserName!=value){
                    _UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ProfilePictureURL;
        public string ProfilePictureURL
        {
            get { return _ProfilePictureURL; }
            set
            {
                if(_ProfilePictureURL!=value){
                    _ProfilePictureURL=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProfilePictureURL");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Link;
        public string Link
        {
            get { return _Link; }
            set
            {
                if(_Link!=value){
                    _Link=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Link");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifiedDate;
        public DateTime? ModifiedDate
        {
            get { return _ModifiedDate; }
            set
            {
                if(_ModifiedDate!=value){
                    _ModifiedDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifiedDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsPictureSilhouette;
        public bool? IsPictureSilhouette
        {
            get { return _IsPictureSilhouette; }
            set
            {
                if(_IsPictureSilhouette!=value){
                    _IsPictureSilhouette=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPictureSilhouette");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<FBAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppSession table in the Meetball Database.
    /// </summary>
    public partial class AppSession: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppSession> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppSession>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppSession> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppSession item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppSession item=new AppSession();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppSession> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppSession(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppSession.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppSession>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppSession(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppSession(Expression<Func<AppSession, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppSession> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppSession> _repo;
            
            if(db.TestMode){
                AppSession.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppSession>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppSession> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppSession SingleOrDefault(Expression<Func<AppSession, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppSession single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppSession SingleOrDefault(Expression<Func<AppSession, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppSession single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppSession, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppSession, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppSession> Find(Expression<Func<AppSession, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppSession> Find(Expression<Func<AppSession, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppSession> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppSession> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppSession> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppSession> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppSession> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppSession> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SessionGuid";
        }

        public object KeyValue()
        {
            return this.SessionGuid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FacebookAuthToken.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppSession)){
                AppSession compare=(AppSession)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.FacebookAuthToken.ToString();
                    }

        public string DescriptorColumn() {
            return "FacebookAuthToken";
        }
        public static string GetKeyColumn()
        {
            return "SessionGuid";
        }        
        public static string GetDescriptorColumn()
        {
            return "FacebookAuthToken";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ApiKey> ApiKeys
        {
            get
            {
                
                  var repo=DBDataAccess.ApiKey.GetRepo();
                  return from items in repo.GetAll()
                       where items.ApiKeyGuid == _ApiKeyGuid
                       select items;
            }
        }

        public IQueryable<MethodLog> MethodLogs
        {
            get
            {
                
                  var repo=DBDataAccess.MethodLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppSessionGuid == _SessionGuid
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserId
                       select items;
            }
        }

        public IQueryable<LoginType> LoginTypes
        {
            get
            {
                
                  var repo=DBDataAccess.LoginType.GetRepo();
                  return from items in repo.GetAll()
                       where items.LoginTypeID == _LoginTypeID
                       select items;
            }
        }

        #endregion
        

        Guid _SessionGuid;
        public Guid SessionGuid
        {
            get { return _SessionGuid; }
            set
            {
                if(_SessionGuid!=value){
                    _SessionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SessionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserId;
        public int AppUserId
        {
            get { return _AppUserId; }
            set
            {
                if(_AppUserId!=value){
                    _AppUserId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _SessionStart;
        public DateTime SessionStart
        {
            get { return _SessionStart; }
            set
            {
                if(_SessionStart!=value){
                    _SessionStart=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SessionStart");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _SessionEnd;
        public DateTime? SessionEnd
        {
            get { return _SessionEnd; }
            set
            {
                if(_SessionEnd!=value){
                    _SessionEnd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SessionEnd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _ApiKeyGuid;
        public Guid ApiKeyGuid
        {
            get { return _ApiKeyGuid; }
            set
            {
                if(_ApiKeyGuid!=value){
                    _ApiKeyGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApiKeyGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LoginTypeID;
        public int? LoginTypeID
        {
            get { return _LoginTypeID; }
            set
            {
                if(_LoginTypeID!=value){
                    _LoginTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LoginTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FacebookAuthToken;
        public string FacebookAuthToken
        {
            get { return _FacebookAuthToken; }
            set
            {
                if(_FacebookAuthToken!=value){
                    _FacebookAuthToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FacebookAuthToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppSession, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MethodLog table in the Meetball Database.
    /// </summary>
    public partial class MethodLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MethodLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MethodLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MethodLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MethodLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MethodLog item=new MethodLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MethodLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MethodLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MethodLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MethodLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MethodLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MethodLog(Expression<Func<MethodLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MethodLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MethodLog> _repo;
            
            if(db.TestMode){
                MethodLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MethodLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MethodLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static MethodLog SingleOrDefault(Expression<Func<MethodLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MethodLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MethodLog SingleOrDefault(Expression<Func<MethodLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MethodLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MethodLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MethodLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MethodLog> Find(Expression<Func<MethodLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MethodLog> Find(Expression<Func<MethodLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MethodLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MethodLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MethodLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MethodLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MethodLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MethodLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MethodLogID";
        }

        public object KeyValue()
        {
            return this.MethodLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MethodLogName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MethodLog)){
                MethodLog compare=(MethodLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MethodLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.MethodLogName.ToString();
                    }

        public string DescriptorColumn() {
            return "MethodLogName";
        }
        public static string GetKeyColumn()
        {
            return "MethodLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MethodLogName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppSession> AppSessions
        {
            get
            {
                
                  var repo=DBDataAccess.AppSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.SessionGuid == _AppSessionGuid
                       select items;
            }
        }

        #endregion
        

        int _MethodLogID;
        public int MethodLogID
        {
            get { return _MethodLogID; }
            set
            {
                if(_MethodLogID!=value){
                    _MethodLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MethodLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MethodLogName;
        public string MethodLogName
        {
            get { return _MethodLogName; }
            set
            {
                if(_MethodLogName!=value){
                    _MethodLogName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MethodLogName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MethodParameters;
        public string MethodParameters
        {
            get { return _MethodParameters; }
            set
            {
                if(_MethodParameters!=value){
                    _MethodParameters=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MethodParameters");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CallDate;
        public DateTime? CallDate
        {
            get { return _CallDate; }
            set
            {
                if(_CallDate!=value){
                    _CallDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CallDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Successful;
        public bool? Successful
        {
            get { return _Successful; }
            set
            {
                if(_Successful!=value){
                    _Successful=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Successful");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid? _AppSessionGuid;
        public Guid? AppSessionGuid
        {
            get { return _AppSessionGuid; }
            set
            {
                if(_AppSessionGuid!=value){
                    _AppSessionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppSessionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid? _ExceptionGuid;
        public Guid? ExceptionGuid
        {
            get { return _ExceptionGuid; }
            set
            {
                if(_ExceptionGuid!=value){
                    _ExceptionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid? _MBExceptionGuid;
        public Guid? MBExceptionGuid
        {
            get { return _MBExceptionGuid; }
            set
            {
                if(_MBExceptionGuid!=value){
                    _MBExceptionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBExceptionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _Duration;
        public double? Duration
        {
            get { return _Duration; }
            set
            {
                if(_Duration!=value){
                    _Duration=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Duration");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _TestBool;
        public bool? TestBool
        {
            get { return _TestBool; }
            set
            {
                if(_TestBool!=value){
                    _TestBool=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TestBool");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _API;
        public string API
        {
            get { return _API; }
            set
            {
                if(_API!=value){
                    _API=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="API");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RetVal;
        public string RetVal
        {
            get { return _RetVal; }
            set
            {
                if(_RetVal!=value){
                    _RetVal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RetVal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MethodLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Broadcast table in the Meetball Database.
    /// </summary>
    public partial class Broadcast: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Broadcast> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Broadcast>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Broadcast> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Broadcast item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Broadcast item=new Broadcast();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Broadcast> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Broadcast(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Broadcast.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Broadcast>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Broadcast(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Broadcast(Expression<Func<Broadcast, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Broadcast> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Broadcast> _repo;
            
            if(db.TestMode){
                Broadcast.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Broadcast>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Broadcast> GetRepo(){
            return GetRepo("","");
        }
        
        public static Broadcast SingleOrDefault(Expression<Func<Broadcast, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Broadcast single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Broadcast SingleOrDefault(Expression<Func<Broadcast, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Broadcast single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Broadcast, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Broadcast, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Broadcast> Find(Expression<Func<Broadcast, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Broadcast> Find(Expression<Func<Broadcast, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Broadcast> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Broadcast> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Broadcast> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Broadcast> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Broadcast> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Broadcast> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "BroadcastID";
        }

        public object KeyValue()
        {
            return this.BroadcastID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.BroadcastGPXWKT.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Broadcast)){
                Broadcast compare=(Broadcast)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.BroadcastID;
        }
        
        public string DescriptorValue()
        {
                            return this.BroadcastGPXWKT.ToString();
                    }

        public string DescriptorColumn() {
            return "BroadcastGPXWKT";
        }
        public static string GetKeyColumn()
        {
            return "BroadcastID";
        }        
        public static string GetDescriptorColumn()
        {
            return "BroadcastGPXWKT";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<MeetBallXBroadcast> MeetBallXBroadcasts
        {
            get
            {
                
                  var repo=DBDataAccess.MeetBallXBroadcast.GetRepo();
                  return from items in repo.GetAll()
                       where items.BroadcastID == _BroadcastID
                       select items;
            }
        }

        public IQueryable<MeetballResponse> MeetballResponses
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballResponse.GetRepo();
                  return from items in repo.GetAll()
                       where items.BroadcastID == _BroadcastID
                       select items;
            }
        }

        #endregion
        

        int _BroadcastID;
        public int BroadcastID
        {
            get { return _BroadcastID; }
            set
            {
                if(_BroadcastID!=value){
                    _BroadcastID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BroadcastID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _BroadcastDate;
        public DateTime? BroadcastDate
        {
            get { return _BroadcastDate; }
            set
            {
                if(_BroadcastDate!=value){
                    _BroadcastDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BroadcastDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BroadcastGPXWKT;
        public string BroadcastGPXWKT
        {
            get { return _BroadcastGPXWKT; }
            set
            {
                if(_BroadcastGPXWKT!=value){
                    _BroadcastGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BroadcastGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Broadcast, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetBallXBroadcast table in the Meetball Database.
    /// </summary>
    public partial class MeetBallXBroadcast: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetBallXBroadcast> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetBallXBroadcast>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetBallXBroadcast> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetBallXBroadcast item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetBallXBroadcast item=new MeetBallXBroadcast();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetBallXBroadcast> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetBallXBroadcast(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetBallXBroadcast.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetBallXBroadcast>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetBallXBroadcast(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetBallXBroadcast(Expression<Func<MeetBallXBroadcast, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetBallXBroadcast> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetBallXBroadcast> _repo;
            
            if(db.TestMode){
                MeetBallXBroadcast.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetBallXBroadcast>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetBallXBroadcast> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetBallXBroadcast SingleOrDefault(Expression<Func<MeetBallXBroadcast, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetBallXBroadcast single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetBallXBroadcast SingleOrDefault(Expression<Func<MeetBallXBroadcast, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetBallXBroadcast single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetBallXBroadcast, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetBallXBroadcast, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetBallXBroadcast> Find(Expression<Func<MeetBallXBroadcast, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetBallXBroadcast> Find(Expression<Func<MeetBallXBroadcast, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetBallXBroadcast> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetBallXBroadcast> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetBallXBroadcast> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetBallXBroadcast> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetBallXBroadcast> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetBallXBroadcast> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "BroadcastID";
        }

        public object KeyValue()
        {
            return this.BroadcastID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.BroadcastID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetBallXBroadcast)){
                MeetBallXBroadcast compare=(MeetBallXBroadcast)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.BroadcastID;
        }
        
        public string DescriptorValue()
        {
                            return this.BroadcastID.ToString();
                    }

        public string DescriptorColumn() {
            return "BroadcastID";
        }
        public static string GetKeyColumn()
        {
            return "BroadcastID";
        }        
        public static string GetDescriptorColumn()
        {
            return "BroadcastID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Broadcast> Broadcasts
        {
            get
            {
                
                  var repo=DBDataAccess.Broadcast.GetRepo();
                  return from items in repo.GetAll()
                       where items.BroadcastID == _BroadcastID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MeetballID;
        public int MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BroadcastID;
        public int BroadcastID
        {
            get { return _BroadcastID; }
            set
            {
                if(_BroadcastID!=value){
                    _BroadcastID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BroadcastID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetBallXBroadcast, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MBXBroadcastTemp table in the Meetball Database.
    /// </summary>
    public partial class MBXBroadcastTemp: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MBXBroadcastTemp> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MBXBroadcastTemp>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MBXBroadcastTemp> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MBXBroadcastTemp item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MBXBroadcastTemp item=new MBXBroadcastTemp();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MBXBroadcastTemp> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MBXBroadcastTemp(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MBXBroadcastTemp.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MBXBroadcastTemp>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MBXBroadcastTemp(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MBXBroadcastTemp(Expression<Func<MBXBroadcastTemp, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MBXBroadcastTemp> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MBXBroadcastTemp> _repo;
            
            if(db.TestMode){
                MBXBroadcastTemp.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MBXBroadcastTemp>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MBXBroadcastTemp> GetRepo(){
            return GetRepo("","");
        }
        
        public static MBXBroadcastTemp SingleOrDefault(Expression<Func<MBXBroadcastTemp, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MBXBroadcastTemp single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MBXBroadcastTemp SingleOrDefault(Expression<Func<MBXBroadcastTemp, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MBXBroadcastTemp single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MBXBroadcastTemp, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MBXBroadcastTemp, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MBXBroadcastTemp> Find(Expression<Func<MBXBroadcastTemp, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MBXBroadcastTemp> Find(Expression<Func<MBXBroadcastTemp, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MBXBroadcastTemp> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MBXBroadcastTemp> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MBXBroadcastTemp> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MBXBroadcastTemp> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MBXBroadcastTemp> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MBXBroadcastTemp> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "BroadcastID";
        }

        public object KeyValue()
        {
            return this.BroadcastID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MeetballID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MBXBroadcastTemp)){
                MBXBroadcastTemp compare=(MBXBroadcastTemp)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.BroadcastID;
        }
        
        public string DescriptorValue()
        {
                            return this.MeetballID.ToString();
                    }

        public string DescriptorColumn() {
            return "MeetballID";
        }
        public static string GetKeyColumn()
        {
            return "BroadcastID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MeetballID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _BroadcastID;
        public int BroadcastID
        {
            get { return _BroadcastID; }
            set
            {
                if(_BroadcastID!=value){
                    _BroadcastID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BroadcastID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MBXBroadcastTemp, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserXNotPossibleFriendAppUser table in the Meetball Database.
    /// </summary>
    public partial class AppUserXNotPossibleFriendAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserXNotPossibleFriendAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserXNotPossibleFriendAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserXNotPossibleFriendAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserXNotPossibleFriendAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserXNotPossibleFriendAppUser item=new AppUserXNotPossibleFriendAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserXNotPossibleFriendAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserXNotPossibleFriendAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserXNotPossibleFriendAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXNotPossibleFriendAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserXNotPossibleFriendAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserXNotPossibleFriendAppUser(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserXNotPossibleFriendAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserXNotPossibleFriendAppUser> _repo;
            
            if(db.TestMode){
                AppUserXNotPossibleFriendAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserXNotPossibleFriendAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserXNotPossibleFriendAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserXNotPossibleFriendAppUser SingleOrDefault(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserXNotPossibleFriendAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserXNotPossibleFriendAppUser SingleOrDefault(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserXNotPossibleFriendAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserXNotPossibleFriendAppUser> Find(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserXNotPossibleFriendAppUser> Find(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserXNotPossibleFriendAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserXNotPossibleFriendAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserXNotPossibleFriendAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserXNotPossibleFriendAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserXNotPossibleFriendAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserXNotPossibleFriendAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserID";
        }

        public object KeyValue()
        {
            return this.AppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.NotPossibleAppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserXNotPossibleFriendAppUser)){
                AppUserXNotPossibleFriendAppUser compare=(AppUserXNotPossibleFriendAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.NotPossibleAppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "NotPossibleAppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "NotPossibleAppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _NotPossibleAppUserID
                       select items;
            }
        }

        #endregion
        

        int _AppUserID;
        public int AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NotPossibleAppUserID;
        public int NotPossibleAppUserID
        {
            get { return _NotPossibleAppUserID; }
            set
            {
                if(_NotPossibleAppUserID!=value){
                    _NotPossibleAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotPossibleAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserXNotPossibleFriendAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserMerge table in the Meetball Database.
    /// </summary>
    public partial class AppUserMerge: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserMerge> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserMerge>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserMerge> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserMerge item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserMerge item=new AppUserMerge();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserMerge> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserMerge(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserMerge.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserMerge>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserMerge(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserMerge(Expression<Func<AppUserMerge, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserMerge> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserMerge> _repo;
            
            if(db.TestMode){
                AppUserMerge.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserMerge>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserMerge> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserMerge SingleOrDefault(Expression<Func<AppUserMerge, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserMerge single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserMerge SingleOrDefault(Expression<Func<AppUserMerge, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserMerge single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserMerge, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserMerge, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserMerge> Find(Expression<Func<AppUserMerge, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserMerge> Find(Expression<Func<AppUserMerge, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserMerge> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserMerge> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserMerge> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserMerge> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserMerge> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserMerge> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserMergeID";
        }

        public object KeyValue()
        {
            return this.AppUserMergeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MergedAppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserMerge)){
                AppUserMerge compare=(AppUserMerge)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserMergeID;
        }
        
        public string DescriptorValue()
        {
                            return this.MergedAppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "MergedAppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserMergeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "MergedAppUserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _MergedAppUserID
                       select items;
            }
        }

        public IQueryable<AppUser> AppUsers1
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _ActiveAppUserID
                       select items;
            }
        }

        #endregion
        

        int _AppUserMergeID;
        public int AppUserMergeID
        {
            get { return _AppUserMergeID; }
            set
            {
                if(_AppUserMergeID!=value){
                    _AppUserMergeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserMergeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MergedAppUserID;
        public int? MergedAppUserID
        {
            get { return _MergedAppUserID; }
            set
            {
                if(_MergedAppUserID!=value){
                    _MergedAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MergedAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ActiveAppUserID;
        public int? ActiveAppUserID
        {
            get { return _ActiveAppUserID; }
            set
            {
                if(_ActiveAppUserID!=value){
                    _ActiveAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActiveAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _MergeDate;
        public DateTime? MergeDate
        {
            get { return _MergeDate; }
            set
            {
                if(_MergeDate!=value){
                    _MergeDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MergeDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserMerge, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the EmailAppUser table in the Meetball Database.
    /// </summary>
    public partial class EmailAppUser: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<EmailAppUser> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<EmailAppUser>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<EmailAppUser> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(EmailAppUser item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                EmailAppUser item=new EmailAppUser();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<EmailAppUser> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public EmailAppUser(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                EmailAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailAppUser>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public EmailAppUser(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public EmailAppUser(Expression<Func<EmailAppUser, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<EmailAppUser> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<EmailAppUser> _repo;
            
            if(db.TestMode){
                EmailAppUser.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailAppUser>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<EmailAppUser> GetRepo(){
            return GetRepo("","");
        }
        
        public static EmailAppUser SingleOrDefault(Expression<Func<EmailAppUser, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            EmailAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static EmailAppUser SingleOrDefault(Expression<Func<EmailAppUser, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            EmailAppUser single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<EmailAppUser, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<EmailAppUser, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<EmailAppUser> Find(Expression<Func<EmailAppUser, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<EmailAppUser> Find(Expression<Func<EmailAppUser, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<EmailAppUser> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<EmailAppUser> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EmailAppUser> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EmailAppUser> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EmailAppUser> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<EmailAppUser> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "EmailAppUserID";
        }

        public object KeyValue()
        {
            return this.EmailAppUserID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Email.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(EmailAppUser)){
                EmailAppUser compare=(EmailAppUser)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.EmailAppUserID;
        }
        
        public string DescriptorValue()
        {
                            return this.Email.ToString();
                    }

        public string DescriptorColumn() {
            return "Email";
        }
        public static string GetKeyColumn()
        {
            return "EmailAppUserID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Email";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        #endregion
        

        int _EmailAppUserID;
        public int EmailAppUserID
        {
            get { return _EmailAppUserID; }
            set
            {
                if(_EmailAppUserID!=value){
                    _EmailAppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailAppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _Active;
        public bool? Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsEmailRegistered;
        public bool? IsEmailRegistered
        {
            get { return _IsEmailRegistered; }
            set
            {
                if(_IsEmailRegistered!=value){
                    _IsEmailRegistered=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsEmailRegistered");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _FriendsImported;
        public bool? FriendsImported
        {
            get { return _FriendsImported; }
            set
            {
                if(_FriendsImported!=value){
                    _FriendsImported=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendsImported");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _MeetBallsImported;
        public bool? MeetBallsImported
        {
            get { return _MeetBallsImported; }
            set
            {
                if(_MeetBallsImported!=value){
                    _MeetBallsImported=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetBallsImported");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PrimaryEmail;
        public string PrimaryEmail
        {
            get { return _PrimaryEmail; }
            set
            {
                if(_PrimaryEmail!=value){
                    _PrimaryEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PrimaryEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<EmailAppUser, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MethodLogException table in the Meetball Database.
    /// </summary>
    public partial class MethodLogException: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MethodLogException> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MethodLogException>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MethodLogException> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MethodLogException item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MethodLogException item=new MethodLogException();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MethodLogException> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MethodLogException(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MethodLogException.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MethodLogException>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MethodLogException(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MethodLogException(Expression<Func<MethodLogException, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MethodLogException> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MethodLogException> _repo;
            
            if(db.TestMode){
                MethodLogException.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MethodLogException>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MethodLogException> GetRepo(){
            return GetRepo("","");
        }
        
        public static MethodLogException SingleOrDefault(Expression<Func<MethodLogException, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MethodLogException single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MethodLogException SingleOrDefault(Expression<Func<MethodLogException, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MethodLogException single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MethodLogException, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MethodLogException, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MethodLogException> Find(Expression<Func<MethodLogException, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MethodLogException> Find(Expression<Func<MethodLogException, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MethodLogException> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MethodLogException> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MethodLogException> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MethodLogException> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MethodLogException> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MethodLogException> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MethodLogExceptionId";
        }

        public object KeyValue()
        {
            return this.MethodLogExceptionId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ExceptionCode.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MethodLogException)){
                MethodLogException compare=(MethodLogException)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MethodLogExceptionId;
        }
        
        public string DescriptorValue()
        {
                            return this.ExceptionCode.ToString();
                    }

        public string DescriptorColumn() {
            return "ExceptionCode";
        }
        public static string GetKeyColumn()
        {
            return "MethodLogExceptionId";
        }        
        public static string GetDescriptorColumn()
        {
            return "ExceptionCode";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _MethodLogExceptionId;
        public int MethodLogExceptionId
        {
            get { return _MethodLogExceptionId; }
            set
            {
                if(_MethodLogExceptionId!=value){
                    _MethodLogExceptionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MethodLogExceptionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid? _ExceptionGuid;
        public Guid? ExceptionGuid
        {
            get { return _ExceptionGuid; }
            set
            {
                if(_ExceptionGuid!=value){
                    _ExceptionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExceptionCode;
        public string ExceptionCode
        {
            get { return _ExceptionCode; }
            set
            {
                if(_ExceptionCode!=value){
                    _ExceptionCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExceptionSource;
        public string ExceptionSource
        {
            get { return _ExceptionSource; }
            set
            {
                if(_ExceptionSource!=value){
                    _ExceptionSource=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionSource");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExceptionMessage;
        public string ExceptionMessage
        {
            get { return _ExceptionMessage; }
            set
            {
                if(_ExceptionMessage!=value){
                    _ExceptionMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExceptionStackTrace;
        public string ExceptionStackTrace
        {
            get { return _ExceptionStackTrace; }
            set
            {
                if(_ExceptionStackTrace!=value){
                    _ExceptionStackTrace=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionStackTrace");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExceptionTargetSite;
        public string ExceptionTargetSite
        {
            get { return _ExceptionTargetSite; }
            set
            {
                if(_ExceptionTargetSite!=value){
                    _ExceptionTargetSite=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionTargetSite");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ExceptionDate;
        public DateTime? ExceptionDate
        {
            get { return _ExceptionDate; }
            set
            {
                if(_ExceptionDate!=value){
                    _ExceptionDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExceptionDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MethodLogException, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserPlatform table in the Meetball Database.
    /// </summary>
    public partial class AppUserPlatform: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserPlatform> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserPlatform>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserPlatform> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserPlatform item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserPlatform item=new AppUserPlatform();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserPlatform> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserPlatform(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserPlatform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserPlatform>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserPlatform(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserPlatform(Expression<Func<AppUserPlatform, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserPlatform> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserPlatform> _repo;
            
            if(db.TestMode){
                AppUserPlatform.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserPlatform>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserPlatform> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserPlatform SingleOrDefault(Expression<Func<AppUserPlatform, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserPlatform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserPlatform SingleOrDefault(Expression<Func<AppUserPlatform, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserPlatform single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserPlatform, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserPlatform, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserPlatform> Find(Expression<Func<AppUserPlatform, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserPlatform> Find(Expression<Func<AppUserPlatform, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserPlatform> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserPlatform> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserPlatform> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserPlatform> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserPlatform> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserPlatform> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserPlatformId";
        }

        public object KeyValue()
        {
            return this.AppUserPlatformId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Locale.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserPlatform)){
                AppUserPlatform compare=(AppUserPlatform)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserPlatformId;
        }
        
        public string DescriptorValue()
        {
                            return this.Locale.ToString();
                    }

        public string DescriptorColumn() {
            return "Locale";
        }
        public static string GetKeyColumn()
        {
            return "AppUserPlatformId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Locale";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _AppUserPlatformId;
        public int AppUserPlatformId
        {
            get { return _AppUserPlatformId; }
            set
            {
                if(_AppUserPlatformId!=value){
                    _AppUserPlatformId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserPlatformId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppUserId;
        public int AppUserId
        {
            get { return _AppUserId; }
            set
            {
                if(_AppUserId!=value){
                    _AppUserId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Locale;
        public string Locale
        {
            get { return _Locale; }
            set
            {
                if(_Locale!=value){
                    _Locale=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Locale");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Manufacturer;
        public string Manufacturer
        {
            get { return _Manufacturer; }
            set
            {
                if(_Manufacturer!=value){
                    _Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Model;
        public string Model
        {
            get { return _Model; }
            set
            {
                if(_Model!=value){
                    _Model=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Model");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PlatformName;
        public string PlatformName
        {
            get { return _PlatformName; }
            set
            {
                if(_PlatformName!=value){
                    _PlatformName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PlatformName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _NetMask;
        public string NetMask
        {
            get { return _NetMask; }
            set
            {
                if(_NetMask!=value){
                    _NetMask=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NetMask");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OsName;
        public string OsName
        {
            get { return _OsName; }
            set
            {
                if(_OsName!=value){
                    _OsName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OsName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OsType;
        public string OsType
        {
            get { return _OsType; }
            set
            {
                if(_OsType!=value){
                    _OsType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OsType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        short? _ProcessorCount;
        public short? ProcessorCount
        {
            get { return _ProcessorCount; }
            set
            {
                if(_ProcessorCount!=value){
                    _ProcessorCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProcessorCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Version;
        public string Version
        {
            get { return _Version; }
            set
            {
                if(_Version!=value){
                    _Version=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Version");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserPlatform, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MethodLogMBException table in the Meetball Database.
    /// </summary>
    public partial class MethodLogMBException: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MethodLogMBException> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MethodLogMBException>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MethodLogMBException> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MethodLogMBException item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MethodLogMBException item=new MethodLogMBException();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MethodLogMBException> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MethodLogMBException(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MethodLogMBException.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MethodLogMBException>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MethodLogMBException(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MethodLogMBException(Expression<Func<MethodLogMBException, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MethodLogMBException> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MethodLogMBException> _repo;
            
            if(db.TestMode){
                MethodLogMBException.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MethodLogMBException>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MethodLogMBException> GetRepo(){
            return GetRepo("","");
        }
        
        public static MethodLogMBException SingleOrDefault(Expression<Func<MethodLogMBException, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MethodLogMBException single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MethodLogMBException SingleOrDefault(Expression<Func<MethodLogMBException, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MethodLogMBException single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MethodLogMBException, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MethodLogMBException, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MethodLogMBException> Find(Expression<Func<MethodLogMBException, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MethodLogMBException> Find(Expression<Func<MethodLogMBException, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MethodLogMBException> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MethodLogMBException> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MethodLogMBException> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MethodLogMBException> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MethodLogMBException> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MethodLogMBException> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MethodLogMBExceptionId";
        }

        public object KeyValue()
        {
            return this.MethodLogMBExceptionId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MBExceptionCode.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MethodLogMBException)){
                MethodLogMBException compare=(MethodLogMBException)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MethodLogMBExceptionId;
        }
        
        public string DescriptorValue()
        {
                            return this.MBExceptionCode.ToString();
                    }

        public string DescriptorColumn() {
            return "MBExceptionCode";
        }
        public static string GetKeyColumn()
        {
            return "MethodLogMBExceptionId";
        }        
        public static string GetDescriptorColumn()
        {
            return "MBExceptionCode";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _MethodLogMBExceptionId;
        public int MethodLogMBExceptionId
        {
            get { return _MethodLogMBExceptionId; }
            set
            {
                if(_MethodLogMBExceptionId!=value){
                    _MethodLogMBExceptionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MethodLogMBExceptionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid? _MBExceptionGuid;
        public Guid? MBExceptionGuid
        {
            get { return _MBExceptionGuid; }
            set
            {
                if(_MBExceptionGuid!=value){
                    _MBExceptionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBExceptionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MBExceptionCode;
        public string MBExceptionCode
        {
            get { return _MBExceptionCode; }
            set
            {
                if(_MBExceptionCode!=value){
                    _MBExceptionCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBExceptionCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FriendlyMessage;
        public string FriendlyMessage
        {
            get { return _FriendlyMessage; }
            set
            {
                if(_FriendlyMessage!=value){
                    _FriendlyMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendlyMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeveloperMessage;
        public string DeveloperMessage
        {
            get { return _DeveloperMessage; }
            set
            {
                if(_DeveloperMessage!=value){
                    _DeveloperMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeveloperMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _MBExceptionDate;
        public DateTime? MBExceptionDate
        {
            get { return _MBExceptionDate; }
            set
            {
                if(_MBExceptionDate!=value){
                    _MBExceptionDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBExceptionDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MethodLogMBException, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballTrackingSession table in the Meetball Database.
    /// </summary>
    public partial class MeetballTrackingSession: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballTrackingSession> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballTrackingSession>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballTrackingSession> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballTrackingSession item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballTrackingSession item=new MeetballTrackingSession();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballTrackingSession> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballTrackingSession(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballTrackingSession.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballTrackingSession>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballTrackingSession(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballTrackingSession(Expression<Func<MeetballTrackingSession, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballTrackingSession> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballTrackingSession> _repo;
            
            if(db.TestMode){
                MeetballTrackingSession.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballTrackingSession>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballTrackingSession> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballTrackingSession SingleOrDefault(Expression<Func<MeetballTrackingSession, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballTrackingSession single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballTrackingSession SingleOrDefault(Expression<Func<MeetballTrackingSession, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballTrackingSession single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballTrackingSession, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballTrackingSession, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballTrackingSession> Find(Expression<Func<MeetballTrackingSession, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballTrackingSession> Find(Expression<Func<MeetballTrackingSession, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballTrackingSession> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballTrackingSession> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballTrackingSession> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballTrackingSession> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballTrackingSession> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballTrackingSession> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballTrackingSessionId";
        }

        public object KeyValue()
        {
            return this.MeetballTrackingSessionId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.StartTime.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballTrackingSession)){
                MeetballTrackingSession compare=(MeetballTrackingSession)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.StartTime.ToString();
                    }

        public string DescriptorColumn() {
            return "StartTime";
        }
        public static string GetKeyColumn()
        {
            return "MeetballTrackingSessionId";
        }        
        public static string GetDescriptorColumn()
        {
            return "StartTime";
        }
        
        #region ' Foreign Keys '
        public IQueryable<MeetballTracking> MeetballTrackings
        {
            get
            {
                
                  var repo=DBDataAccess.MeetballTracking.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballTrackingSessionId == _MeetballTrackingSessionId
                       select items;
            }
        }

        #endregion
        

        Guid _MeetballTrackingSessionId;
        public Guid MeetballTrackingSessionId
        {
            get { return _MeetballTrackingSessionId; }
            set
            {
                if(_MeetballTrackingSessionId!=value){
                    _MeetballTrackingSessionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballTrackingSessionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartTime;
        public DateTime? StartTime
        {
            get { return _StartTime; }
            set
            {
                if(_StartTime!=value){
                    _StartTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndTime;
        public DateTime? EndTime
        {
            get { return _EndTime; }
            set
            {
                if(_EndTime!=value){
                    _EndTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _BatteryStart;
        public double? BatteryStart
        {
            get { return _BatteryStart; }
            set
            {
                if(_BatteryStart!=value){
                    _BatteryStart=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BatteryStart");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _BatteryEnd;
        public double? BatteryEnd
        {
            get { return _BatteryEnd; }
            set
            {
                if(_BatteryEnd!=value){
                    _BatteryEnd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BatteryEnd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _MemoryStart;
        public double? MemoryStart
        {
            get { return _MemoryStart; }
            set
            {
                if(_MemoryStart!=value){
                    _MemoryStart=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MemoryStart");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _MemoryEnd;
        public double? MemoryEnd
        {
            get { return _MemoryEnd; }
            set
            {
                if(_MemoryEnd!=value){
                    _MemoryEnd=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MemoryEnd");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballTrackingSession, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ApiKey table in the Meetball Database.
    /// </summary>
    public partial class ApiKey: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ApiKey> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ApiKey>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ApiKey> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ApiKey item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ApiKey item=new ApiKey();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ApiKey> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public ApiKey(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ApiKey.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ApiKey>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ApiKey(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ApiKey(Expression<Func<ApiKey, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ApiKey> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<ApiKey> _repo;
            
            if(db.TestMode){
                ApiKey.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ApiKey>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ApiKey> GetRepo(){
            return GetRepo("","");
        }
        
        public static ApiKey SingleOrDefault(Expression<Func<ApiKey, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ApiKey single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ApiKey SingleOrDefault(Expression<Func<ApiKey, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ApiKey single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ApiKey, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ApiKey, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ApiKey> Find(Expression<Func<ApiKey, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ApiKey> Find(Expression<Func<ApiKey, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ApiKey> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ApiKey> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ApiKey> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ApiKey> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ApiKey> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ApiKey> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ApiKeyGuid";
        }

        public object KeyValue()
        {
            return this.ApiKeyGuid;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Platform.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ApiKey)){
                ApiKey compare=(ApiKey)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
                            return this.Platform.ToString();
                    }

        public string DescriptorColumn() {
            return "Platform";
        }
        public static string GetKeyColumn()
        {
            return "ApiKeyGuid";
        }        
        public static string GetDescriptorColumn()
        {
            return "Platform";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppSession> AppSessions
        {
            get
            {
                
                  var repo=DBDataAccess.AppSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.ApiKeyGuid == _ApiKeyGuid
                       select items;
            }
        }

        public IQueryable<AppDeveloper> AppDevelopers
        {
            get
            {
                
                  var repo=DBDataAccess.AppDeveloper.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppDeveloperId == _AppDeveloperId
                       select items;
            }
        }

        #endregion
        

        Guid _ApiKeyGuid;
        public Guid ApiKeyGuid
        {
            get { return _ApiKeyGuid; }
            set
            {
                if(_ApiKeyGuid!=value){
                    _ApiKeyGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApiKeyGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Status;
        public int Status
        {
            get { return _Status; }
            set
            {
                if(_Status!=value){
                    _Status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AppDeveloperId;
        public int AppDeveloperId
        {
            get { return _AppDeveloperId; }
            set
            {
                if(_AppDeveloperId!=value){
                    _AppDeveloperId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppDeveloperId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Platform;
        public string Platform
        {
            get { return _Platform; }
            set
            {
                if(_Platform!=value){
                    _Platform=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Platform");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ApiKey, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MBException table in the Meetball Database.
    /// </summary>
    public partial class MBException: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MBException> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MBException>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MBException> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MBException item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MBException item=new MBException();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MBException> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MBException(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MBException.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MBException>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MBException(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MBException(Expression<Func<MBException, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MBException> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MBException> _repo;
            
            if(db.TestMode){
                MBException.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MBException>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MBException> GetRepo(){
            return GetRepo("","");
        }
        
        public static MBException SingleOrDefault(Expression<Func<MBException, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MBException single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MBException SingleOrDefault(Expression<Func<MBException, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MBException single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MBException, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MBException, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MBException> Find(Expression<Func<MBException, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MBException> Find(Expression<Func<MBException, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MBException> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MBException> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MBException> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MBException> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MBException> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MBException> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MBExceptionId";
        }

        public object KeyValue()
        {
            return this.MBExceptionId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MBExceptionCode.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MBException)){
                MBException compare=(MBException)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MBExceptionId;
        }
        
        public string DescriptorValue()
        {
                            return this.MBExceptionCode.ToString();
                    }

        public string DescriptorColumn() {
            return "MBExceptionCode";
        }
        public static string GetKeyColumn()
        {
            return "MBExceptionId";
        }        
        public static string GetDescriptorColumn()
        {
            return "MBExceptionCode";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _MBExceptionId;
        public int MBExceptionId
        {
            get { return _MBExceptionId; }
            set
            {
                if(_MBExceptionId!=value){
                    _MBExceptionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBExceptionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MBExceptionCode;
        public string MBExceptionCode
        {
            get { return _MBExceptionCode; }
            set
            {
                if(_MBExceptionCode!=value){
                    _MBExceptionCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MBExceptionCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FriendlyMessage;
        public string FriendlyMessage
        {
            get { return _FriendlyMessage; }
            set
            {
                if(_FriendlyMessage!=value){
                    _FriendlyMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendlyMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DeveloperMessage;
        public string DeveloperMessage
        {
            get { return _DeveloperMessage; }
            set
            {
                if(_DeveloperMessage!=value){
                    _DeveloperMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeveloperMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusId;
        public int? StatusId
        {
            get { return _StatusId; }
            set
            {
                if(_StatusId!=value){
                    _StatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MBException, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppDeveloper table in the Meetball Database.
    /// </summary>
    public partial class AppDeveloper: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppDeveloper> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppDeveloper>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppDeveloper> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppDeveloper item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppDeveloper item=new AppDeveloper();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppDeveloper> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppDeveloper(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppDeveloper.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppDeveloper>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppDeveloper(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppDeveloper(Expression<Func<AppDeveloper, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppDeveloper> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppDeveloper> _repo;
            
            if(db.TestMode){
                AppDeveloper.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppDeveloper>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppDeveloper> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppDeveloper SingleOrDefault(Expression<Func<AppDeveloper, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppDeveloper single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppDeveloper SingleOrDefault(Expression<Func<AppDeveloper, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppDeveloper single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppDeveloper, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppDeveloper, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppDeveloper> Find(Expression<Func<AppDeveloper, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppDeveloper> Find(Expression<Func<AppDeveloper, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppDeveloper> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppDeveloper> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppDeveloper> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppDeveloper> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppDeveloper> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppDeveloper> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppDeveloperId";
        }

        public object KeyValue()
        {
            return this.AppDeveloperId;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppDeveloper)){
                AppDeveloper compare=(AppDeveloper)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppDeveloperId;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "AppDeveloperId";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ApiKey> ApiKeys
        {
            get
            {
                
                  var repo=DBDataAccess.ApiKey.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppDeveloperId == _AppDeveloperId
                       select items;
            }
        }

        #endregion
        

        int _AppDeveloperId;
        public int AppDeveloperId
        {
            get { return _AppDeveloperId; }
            set
            {
                if(_AppDeveloperId!=value){
                    _AppDeveloperId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppDeveloperId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppDeveloper, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeetballAction table in the Meetball Database.
    /// </summary>
    public partial class MeetballAction: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeetballAction> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeetballAction>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeetballAction> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeetballAction item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeetballAction item=new MeetballAction();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeetballAction> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MeetballAction(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeetballAction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballAction>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeetballAction(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeetballAction(Expression<Func<MeetballAction, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeetballAction> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MeetballAction> _repo;
            
            if(db.TestMode){
                MeetballAction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeetballAction>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeetballAction> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeetballAction SingleOrDefault(Expression<Func<MeetballAction, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeetballAction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeetballAction SingleOrDefault(Expression<Func<MeetballAction, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeetballAction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeetballAction, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeetballAction, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeetballAction> Find(Expression<Func<MeetballAction, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeetballAction> Find(Expression<Func<MeetballAction, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeetballAction> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeetballAction> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeetballAction> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeetballAction> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeetballAction> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeetballAction> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MeetballActionID";
        }

        public object KeyValue()
        {
            return this.MeetballActionID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Message.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeetballAction)){
                MeetballAction compare=(MeetballAction)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MeetballActionID;
        }
        
        public string DescriptorValue()
        {
                            return this.Message.ToString();
                    }

        public string DescriptorColumn() {
            return "Message";
        }
        public static string GetKeyColumn()
        {
            return "MeetballActionID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MeetballActionID;
        public int MeetballActionID
        {
            get { return _MeetballActionID; }
            set
            {
                if(_MeetballActionID!=value){
                    _MeetballActionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballActionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                if(_Message!=value){
                    _Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _OwnerOnly;
        public bool? OwnerOnly
        {
            get { return _OwnerOnly; }
            set
            {
                if(_OwnerOnly!=value){
                    _OwnerOnly=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OwnerOnly");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeetballAction, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Convo table in the Meetball Database.
    /// </summary>
    public partial class Convo: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Convo> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Convo>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Convo> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Convo item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Convo item=new Convo();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Convo> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Convo(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Convo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Convo>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Convo(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Convo(Expression<Func<Convo, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Convo> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Convo> _repo;
            
            if(db.TestMode){
                Convo.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Convo>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Convo> GetRepo(){
            return GetRepo("","");
        }
        
        public static Convo SingleOrDefault(Expression<Func<Convo, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Convo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Convo SingleOrDefault(Expression<Func<Convo, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Convo single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Convo, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Convo, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Convo> Find(Expression<Func<Convo, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Convo> Find(Expression<Func<Convo, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Convo> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Convo> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Convo> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Convo> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Convo> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Convo> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "ConvoID";
        }

        public object KeyValue()
        {
            return this.ConvoID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ConvoName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Convo)){
                Convo compare=(Convo)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.ConvoID;
        }
        
        public string DescriptorValue()
        {
                            return this.ConvoName.ToString();
                    }

        public string DescriptorColumn() {
            return "ConvoName";
        }
        public static string GetKeyColumn()
        {
            return "ConvoID";
        }        
        public static string GetDescriptorColumn()
        {
            return "ConvoName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<MessageMB> MessageMBs
        {
            get
            {
                
                  var repo=DBDataAccess.MessageMB.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<ConvoXAppUser> ConvoXAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.ConvoXAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<AppUserXFriendAppUser> AppUserXFriendAppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUserXFriendAppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<Message> Messages
        {
            get
            {
                
                  var repo=DBDataAccess.Message.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        #endregion
        

        int _ConvoID;
        public int ConvoID
        {
            get { return _ConvoID; }
            set
            {
                if(_ConvoID!=value){
                    _ConvoID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ConvoName;
        public string ConvoName
        {
            get { return _ConvoName; }
            set
            {
                if(_ConvoName!=value){
                    _ConvoName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Convo, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SubvenueType table in the Meetball Database.
    /// </summary>
    public partial class SubvenueType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SubvenueType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SubvenueType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SubvenueType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SubvenueType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SubvenueType item=new SubvenueType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SubvenueType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public SubvenueType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SubvenueType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SubvenueType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SubvenueType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SubvenueType(Expression<Func<SubvenueType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SubvenueType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<SubvenueType> _repo;
            
            if(db.TestMode){
                SubvenueType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SubvenueType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SubvenueType> GetRepo(){
            return GetRepo("","");
        }
        
        public static SubvenueType SingleOrDefault(Expression<Func<SubvenueType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SubvenueType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SubvenueType SingleOrDefault(Expression<Func<SubvenueType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SubvenueType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SubvenueType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SubvenueType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SubvenueType> Find(Expression<Func<SubvenueType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SubvenueType> Find(Expression<Func<SubvenueType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SubvenueType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SubvenueType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SubvenueType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SubvenueType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SubvenueType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SubvenueType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SubvenueTypeID";
        }

        public object KeyValue()
        {
            return this.SubvenueTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SubvenueTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SubvenueType)){
                SubvenueType compare=(SubvenueType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SubvenueTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.SubvenueTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "SubvenueTypeName";
        }
        public static string GetKeyColumn()
        {
            return "SubvenueTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SubvenueTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Subvenue> Subvenues
        {
            get
            {
                
                  var repo=DBDataAccess.Subvenue.GetRepo();
                  return from items in repo.GetAll()
                       where items.SubvenueTypeID == _SubvenueTypeID
                       select items;
            }
        }

        #endregion
        

        int _SubvenueTypeID;
        public int SubvenueTypeID
        {
            get { return _SubvenueTypeID; }
            set
            {
                if(_SubvenueTypeID!=value){
                    _SubvenueTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubvenueTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubvenueTypeName;
        public string SubvenueTypeName
        {
            get { return _SubvenueTypeName; }
            set
            {
                if(_SubvenueTypeName!=value){
                    _SubvenueTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubvenueTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool? _IsActive;
        public bool? IsActive
        {
            get { return _IsActive; }
            set
            {
                if(_IsActive!=value){
                    _IsActive=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActive");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        double? _Weight;
        public double? Weight
        {
            get { return _Weight; }
            set
            {
                if(_Weight!=value){
                    _Weight=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Weight");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SubvenueType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Message table in the Meetball Database.
    /// </summary>
    public partial class Message: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Message> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Message>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Message> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Message item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Message item=new Message();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Message> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Message(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Message.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Message>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Message(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Message(Expression<Func<Message, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Message> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Message> _repo;
            
            if(db.TestMode){
                Message.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Message>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Message> GetRepo(){
            return GetRepo("","");
        }
        
        public static Message SingleOrDefault(Expression<Func<Message, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Message single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Message SingleOrDefault(Expression<Func<Message, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Message single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Message, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Message, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Message> Find(Expression<Func<Message, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Message> Find(Expression<Func<Message, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Message> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Message> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Message> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Message> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Message> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Message> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MessageID";
        }

        public object KeyValue()
        {
            return this.MessageID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
            			    return this.MessageX.ToString();
	                }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Message)){
                Message compare=(Message)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MessageID;
        }
        
        public string DescriptorValue()
        {
            			    return this.MessageX.ToString();
	                }

        public string DescriptorColumn() {
            return "Message";
        }
        public static string GetKeyColumn()
        {
            return "MessageID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Convo> Convos
        {
            get
            {
                
                  var repo=DBDataAccess.Convo.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        #endregion
        

        int _MessageID;
        public int MessageID
        {
            get { return _MessageID; }
            set
            {
                if(_MessageID!=value){
                    _MessageID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MessageID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ConvoID;
        public int? ConvoID
        {
            get { return _ConvoID; }
            set
            {
                if(_ConvoID!=value){
                    _ConvoID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MessageX;
        public string MessageX
        {
            get { return _MessageX; }
            set
            {
                if(_MessageX!=value){
                    _MessageX=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Message, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Subvenue table in the Meetball Database.
    /// </summary>
    public partial class Subvenue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Subvenue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Subvenue>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Subvenue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Subvenue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Subvenue item=new Subvenue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Subvenue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public Subvenue(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Subvenue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Subvenue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Subvenue(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Subvenue(Expression<Func<Subvenue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Subvenue> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<Subvenue> _repo;
            
            if(db.TestMode){
                Subvenue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Subvenue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Subvenue> GetRepo(){
            return GetRepo("","");
        }
        
        public static Subvenue SingleOrDefault(Expression<Func<Subvenue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Subvenue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Subvenue SingleOrDefault(Expression<Func<Subvenue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Subvenue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Subvenue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Subvenue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Subvenue> Find(Expression<Func<Subvenue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Subvenue> Find(Expression<Func<Subvenue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Subvenue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Subvenue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Subvenue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Subvenue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Subvenue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Subvenue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "SubvenueID";
        }

        public object KeyValue()
        {
            return this.SubvenueID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SubvenueName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Subvenue)){
                Subvenue compare=(Subvenue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.SubvenueID;
        }
        
        public string DescriptorValue()
        {
                            return this.SubvenueName.ToString();
                    }

        public string DescriptorColumn() {
            return "SubvenueName";
        }
        public static string GetKeyColumn()
        {
            return "SubvenueID";
        }        
        public static string GetDescriptorColumn()
        {
            return "SubvenueName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SubvenueType> SubvenueTypes
        {
            get
            {
                
                  var repo=DBDataAccess.SubvenueType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SubvenueTypeID == _SubvenueTypeID
                       select items;
            }
        }

        public IQueryable<Venue> Venues
        {
            get
            {
                
                  var repo=DBDataAccess.Venue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueID == _VenueID
                       select items;
            }
        }

        #endregion
        

        int _SubvenueID;
        public int SubvenueID
        {
            get { return _SubvenueID; }
            set
            {
                if(_SubvenueID!=value){
                    _SubvenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubvenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _VenueID;
        public int? VenueID
        {
            get { return _VenueID; }
            set
            {
                if(_VenueID!=value){
                    _VenueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _SubvenueTypeID;
        public int? SubvenueTypeID
        {
            get { return _SubvenueTypeID; }
            set
            {
                if(_SubvenueTypeID!=value){
                    _SubvenueTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubvenueTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubvenueName;
        public string SubvenueName
        {
            get { return _SubvenueName; }
            set
            {
                if(_SubvenueName!=value){
                    _SubvenueName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubvenueName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubvenueGPXWKT;
        public string SubvenueGPXWKT
        {
            get { return _SubvenueGPXWKT; }
            set
            {
                if(_SubvenueGPXWKT!=value){
                    _SubvenueGPXWKT=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubvenueGPXWKT");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Subvenue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AppUserLoginLog table in the Meetball Database.
    /// </summary>
    public partial class AppUserLoginLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AppUserLoginLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AppUserLoginLog>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AppUserLoginLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AppUserLoginLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AppUserLoginLog item=new AppUserLoginLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AppUserLoginLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public AppUserLoginLog(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AppUserLoginLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserLoginLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AppUserLoginLog(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AppUserLoginLog(Expression<Func<AppUserLoginLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AppUserLoginLog> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<AppUserLoginLog> _repo;
            
            if(db.TestMode){
                AppUserLoginLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AppUserLoginLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AppUserLoginLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static AppUserLoginLog SingleOrDefault(Expression<Func<AppUserLoginLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AppUserLoginLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AppUserLoginLog SingleOrDefault(Expression<Func<AppUserLoginLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AppUserLoginLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AppUserLoginLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AppUserLoginLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AppUserLoginLog> Find(Expression<Func<AppUserLoginLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AppUserLoginLog> Find(Expression<Func<AppUserLoginLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AppUserLoginLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AppUserLoginLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AppUserLoginLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AppUserLoginLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AppUserLoginLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AppUserLoginLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "AppUserLoginLogID";
        }

        public object KeyValue()
        {
            return this.AppUserLoginLogID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AppUserID.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AppUserLoginLog)){
                AppUserLoginLog compare=(AppUserLoginLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.AppUserLoginLogID;
        }
        
        public string DescriptorValue()
        {
                            return this.AppUserID.ToString();
                    }

        public string DescriptorColumn() {
            return "AppUserID";
        }
        public static string GetKeyColumn()
        {
            return "AppUserLoginLogID";
        }        
        public static string GetDescriptorColumn()
        {
            return "AppUserID";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _AppUserLoginLogID;
        public int AppUserLoginLogID
        {
            get { return _AppUserLoginLogID; }
            set
            {
                if(_AppUserLoginLogID!=value){
                    _AppUserLoginLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserLoginLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AppUserLoginDate;
        public DateTime? AppUserLoginDate
        {
            get { return _AppUserLoginDate; }
            set
            {
                if(_AppUserLoginDate!=value){
                    _AppUserLoginDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserLoginDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AppUserLoginLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the VenueType table in the Meetball Database.
    /// </summary>
    public partial class VenueType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<VenueType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<VenueType>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<VenueType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(VenueType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                VenueType item=new VenueType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<VenueType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public VenueType(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                VenueType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public VenueType(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public VenueType(Expression<Func<VenueType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<VenueType> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<VenueType> _repo;
            
            if(db.TestMode){
                VenueType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VenueType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<VenueType> GetRepo(){
            return GetRepo("","");
        }
        
        public static VenueType SingleOrDefault(Expression<Func<VenueType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            VenueType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static VenueType SingleOrDefault(Expression<Func<VenueType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            VenueType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<VenueType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<VenueType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<VenueType> Find(Expression<Func<VenueType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<VenueType> Find(Expression<Func<VenueType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<VenueType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<VenueType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<VenueType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<VenueType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<VenueType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<VenueType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "VenueTypeID";
        }

        public object KeyValue()
        {
            return this.VenueTypeID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.VenueTypeName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(VenueType)){
                VenueType compare=(VenueType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.VenueTypeID;
        }
        
        public string DescriptorValue()
        {
                            return this.VenueTypeName.ToString();
                    }

        public string DescriptorColumn() {
            return "VenueTypeName";
        }
        public static string GetKeyColumn()
        {
            return "VenueTypeID";
        }        
        public static string GetDescriptorColumn()
        {
            return "VenueTypeName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Venue> Venues
        {
            get
            {
                
                  var repo=DBDataAccess.Venue.GetRepo();
                  return from items in repo.GetAll()
                       where items.VenueTypeID == _VenueTypeID
                       select items;
            }
        }

        #endregion
        

        int _VenueTypeID;
        public int VenueTypeID
        {
            get { return _VenueTypeID; }
            set
            {
                if(_VenueTypeID!=value){
                    _VenueTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VenueTypeName;
        public string VenueTypeName
        {
            get { return _VenueTypeName; }
            set
            {
                if(_VenueTypeName!=value){
                    _VenueTypeName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VenueTypeName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<VenueType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MessageMB table in the Meetball Database.
    /// </summary>
    public partial class MessageMB: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MessageMB> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MessageMB>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MessageMB> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MessageMB item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MessageMB item=new MessageMB();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MessageMB> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public MessageMB(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MessageMB.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MessageMB>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MessageMB(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MessageMB(Expression<Func<MessageMB, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MessageMB> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<MessageMB> _repo;
            
            if(db.TestMode){
                MessageMB.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MessageMB>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MessageMB> GetRepo(){
            return GetRepo("","");
        }
        
        public static MessageMB SingleOrDefault(Expression<Func<MessageMB, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MessageMB single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MessageMB SingleOrDefault(Expression<Func<MessageMB, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MessageMB single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MessageMB, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MessageMB, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MessageMB> Find(Expression<Func<MessageMB, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MessageMB> Find(Expression<Func<MessageMB, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MessageMB> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MessageMB> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MessageMB> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MessageMB> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MessageMB> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MessageMB> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "MessageMBID";
        }

        public object KeyValue()
        {
            return this.MessageMBID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Message.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MessageMB)){
                MessageMB compare=(MessageMB)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.MessageMBID;
        }
        
        public string DescriptorValue()
        {
                            return this.Message.ToString();
                    }

        public string DescriptorColumn() {
            return "Message";
        }
        public static string GetKeyColumn()
        {
            return "MessageMBID";
        }        
        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AppUser> AppUsers
        {
            get
            {
                
                  var repo=DBDataAccess.AppUser.GetRepo();
                  return from items in repo.GetAll()
                       where items.AppUserID == _AppUserID
                       select items;
            }
        }

        public IQueryable<Convo> Convos
        {
            get
            {
                
                  var repo=DBDataAccess.Convo.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConvoID == _ConvoID
                       select items;
            }
        }

        public IQueryable<Meetball> Meetballs
        {
            get
            {
                
                  var repo=DBDataAccess.Meetball.GetRepo();
                  return from items in repo.GetAll()
                       where items.MeetballID == _MeetballID
                       select items;
            }
        }

        #endregion
        

        int _MessageMBID;
        public int MessageMBID
        {
            get { return _MessageMBID; }
            set
            {
                if(_MessageMBID!=value){
                    _MessageMBID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MessageMBID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ConvoID;
        public int? ConvoID
        {
            get { return _ConvoID; }
            set
            {
                if(_ConvoID!=value){
                    _ConvoID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConvoID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _AppUserID;
        public int? AppUserID
        {
            get { return _AppUserID; }
            set
            {
                if(_AppUserID!=value){
                    _AppUserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppUserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                if(_Message!=value){
                    _Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MeetballID;
        public int? MeetballID
        {
            get { return _MeetballID; }
            set
            {
                if(_MeetballID!=value){
                    _MeetballID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MeetballID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MessageMB, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TVNetwork table in the Meetball Database.
    /// </summary>
    public partial class TVNetwork: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TVNetwork> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TVNetwork>(new DBDataAccess.MeetballDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TVNetwork> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TVNetwork item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TVNetwork item=new TVNetwork();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TVNetwork> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        DBDataAccess.MeetballDB _db;
        public TVNetwork(string connectionString, string providerName) {

            _db=new DBDataAccess.MeetballDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TVNetwork.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TVNetwork>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TVNetwork(){
             _db=new DBDataAccess.MeetballDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TVNetwork(Expression<Func<TVNetwork, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TVNetwork> GetRepo(string connectionString, string providerName){
            DBDataAccess.MeetballDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new DBDataAccess.MeetballDB();
            }else{
                db=new DBDataAccess.MeetballDB(connectionString, providerName);
            }
            IRepository<TVNetwork> _repo;
            
            if(db.TestMode){
                TVNetwork.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TVNetwork>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TVNetwork> GetRepo(){
            return GetRepo("","");
        }
        
        public static TVNetwork SingleOrDefault(Expression<Func<TVNetwork, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TVNetwork single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TVNetwork SingleOrDefault(Expression<Func<TVNetwork, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TVNetwork single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TVNetwork, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TVNetwork, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TVNetwork> Find(Expression<Func<TVNetwork, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TVNetwork> Find(Expression<Func<TVNetwork, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TVNetwork> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TVNetwork> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TVNetwork> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TVNetwork> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TVNetwork> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TVNetwork> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "TVNetworkID";
        }

        public object KeyValue()
        {
            return this.TVNetworkID;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.TVNetworkName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TVNetwork)){
                TVNetwork compare=(TVNetwork)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.TVNetworkID;
        }
        
        public string DescriptorValue()
        {
                            return this.TVNetworkName.ToString();
                    }

        public string DescriptorColumn() {
            return "TVNetworkName";
        }
        public static string GetKeyColumn()
        {
            return "TVNetworkID";
        }        
        public static string GetDescriptorColumn()
        {
            return "TVNetworkName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _TVNetworkID;
        public int TVNetworkID
        {
            get { return _TVNetworkID; }
            set
            {
                if(_TVNetworkID!=value){
                    _TVNetworkID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TVNetworkID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TVNetworkName;
        public string TVNetworkName
        {
            get { return _TVNetworkName; }
            set
            {
                if(_TVNetworkName!=value){
                    _TVNetworkName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TVNetworkName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StatusID;
        public int? StatusID
        {
            get { return _StatusID; }
            set
            {
                if(_StatusID!=value){
                    _StatusID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CreateDate;
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                if(_CreateDate!=value){
                    _CreateDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreateDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ModifyDate;
        public DateTime? ModifyDate
        {
            get { return _ModifyDate; }
            set
            {
                if(_ModifyDate!=value){
                    _ModifyDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ModifyDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TVNetwork, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
}
#pragma warning restore 1591 